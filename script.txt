{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"雨课堂刷课助手","options":{"check_for_updates":false,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.yuketang.cn/*","*://rain.gdufemooc.cn/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1696740304242,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/466651-%E9%9B%A8%E8%AF%BE%E5%A0%82%E5%88%B7%E8%AF%BE%E5%8A%A9%E6%89%8B/code/%E9%9B%A8%E8%AF%BE%E5%A0%82%E5%88%B7%E8%AF%BE%E5%8A%A9%E6%89%8B.user.js","uuid":"d27360f2-50d8-4aea-acc4-48ce1b10aac3","source":"// ==UserScript==
// @name         雨课堂刷课助手
// @namespace    http://tampermonkey.net/
// @version      2.1.1
// @description  针对雨课堂视频进行自动播放
// @author       风之子
// @license      MIT
// @match        *://*.yuketang.cn/*
// @match        *://rain.gdufemooc.cn/*
// @icon         http://niuwh.cn/favicon.ico
// @grant        GM_addStyle
// @require      https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.js
// ==/UserScript==
// 雨课堂刷课脚本
/*
  已适配雨课堂学校及网址：
  学校：中原工学院，河南大学研究院，广东财经大学，辽宁大学，河北大学，中南大学，电子科技大学，华北电力大学，上海理工大学研究生院及其他院校...
  网址：changjiang.yuketang.cn，yuketang.cn ...
*/

// 添加用户交互窗口
function addWindow() {
  // 插入的交互HTML窗口
  const outerHTML = `  <div class="n_outer">
  <div class="n_header">
    雨课堂刷课助手
  </div>
  <div class="n_body">
    <ul class="n_infoAlert">
      <li>⭐ 脚本支持：雨课堂官方版本，二倍速，自动播放</li>
      <li>📢 手动点击进入要刷的课程目录，点击开始刷课，即可自动运行，如页面不动请联系作者</li>
      <li>⚠️ 运行后请不要随意点击刷课窗口，可新开窗口，可最小化浏览器</li>
      <li>💡 拖动上方标题栏可以进行拖拽哦!</li>
      <hr>
    </ul>
  </div>
  <div class="n_footer">
    <p>雨课堂助手 2.0.0 </p>
    <div id="n_zanshang">
      <p>赞赏作者</p>
      <img
        src="data:image/jpeg;base64,/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAQNBA0DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD6pooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCjq+pR6bArupd3OF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DT/Kj/55p+VHlR/880/KgBn2qH+/+ho+1Q/3/wBDT/Kj/wCeaflR5Uf/ADzT8qAGfaof7/6GnJMj/dbP4UGKP/nmv5CnKir91QPoKAHVla1rEem7UCeZM3IXOMD1rVrhvFkbrrDu4+V1UqfbGP500rgXbXxTJ5v+lQp5Z7x5BH59a6qN1kjV0OVYZBry+vQtAjeLR7VJfvbc8+hJI/ShqwGhRRRSAKKKKAIrq2iuoWinQMh7GsmHw1YxyhyJHA52s3y1t0UAIqhVCqAAOgFLRQaACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKrX1jBex7LhNw7HuPpVmigDHtfD9jbyiTEkhHQOeP0FbA46UUUAFFFFABRRRQBFdf6hvw/nTof9Un0H8qZd/8e7/h/Onwf6lP90fyoAfRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBXuWKyw4YgE8gd+RViqt3/r7f6/1FWqACiiigAooooAhvP+PZ/wAP50+D/Ux/7o/lTLz/AI9n/D+dPg/1Mf8Auj+VAD6KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAKt3/r7f8A3v6irVVbv/X2/wDvf1FWqACiiigAooooAhvP+PZ/w/nT4P8AUx/7opl5/wAez/h/Onwf6mP/AHRQA+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCtdf6+3/3v6irNVrr/AF9v/vf1FWaACiiigAooooAhvP8Aj2f8P50+D/Ux/wC6KZef8ez/AIfzp8H+pj/3RQA+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCtdf6+3/AN7+oqzVa6/19v8A739RVmgAooooAKKKKAIbz/j2f8P50+D/AFMf+6KZef8AHs/4fzp8H+pj/wB0UAPooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooArXX+vt/97+oqzVa6/wBfb/739RVmgAooooAKKKKAIbz/AI9n/D+dPg/1Mf8AuimXn/Hs/wCH86fB/qY/90UAPooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooArXX+vt/wDe/qKs1Wuv9fb/AO9/UVZoAKKKKACiiigCG8/49n/D+dPg/wBTH/uimXn/AB7P+H86fB/qY/8AdFAD6KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAK11/r7f/e/qKs1Wuv8AX2/+9/UVZoAKKKKACiiigCG8/wCPZ/w/nT4P9TH/ALopl5/x7P8Ah/Onwf6mP/dFAD6KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAK11/r7f8A3v6irNVrr/X2/wDvf1FWaACiiigAooooAhvP+PZ/w/nT4P8AUx/7opl5/wAez/h/Onwf6mP/AHRQA+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKhvGdLSZov9YqMV+uOKAJqK/Pjw38S/E+k/E6LVbzWL2U/bttzFJKxR0L4ZSvTGPyr9BIZFliSRDlXUMD7GgB9FFFAHy18Rv2kdW0D4h32k6Tp1lLpdhOYJDMG8yQqcMQQeOc44NfTek30ep6XaX0P+quYUmX6MAR/Ovz/AP2i9Nl0z4y+JElXAnmFwhxgFXUNx+JI/Cvtv4PtM3wu8LG5jaOX+zoQVY8j5BigDr6KKKAPHP2ivipqPw3sNLXR7OCe6vmfMk4JVAuOwIyea2/gN8Qbr4jeDH1TULSO2u4LhreQRZ2MQAcjPsa6vxf4R0LxhYpaeI9Nhv4I23oJMgofUEEEfnVrw5oOmeG9Ki03Q7KKyso8lYohgZPUnuT7mgDTooooAKK80/aJl8QRfCzUm8J/aRf7495ts+aIt3z7cc+nTtmvOf2QZfFkia6viBtRbTAEMH2zd/rCfm27u2MZoA+kaKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooArXX+vt/97+oqzVa6/wBfb/739RVmgAooooAKKKKAIbz/AI9n/D+dPg/1Mf8AuimXn/Hs/wCH86fB/qY/90UAPooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAqK6nS1tpZ5jtijUux9ABk1LUN5bx3dpNbzDMcqGNvoRigDxjwf+0V4b8TeMotBjsru0FxIYre6mZdkj9gQOme1e21+bnxE8O3vw/wDiFf6dudJLScS20vTchO5GH4fqDX3z8LfELeK/AGia1IhSW6tw0g/2gSrfqDQB1VFFFAHwf8Y/hX4ls/idqq6Rot5dWN7cG4tZbeIupDnOMjoQSRz6V9u+GLaey8OaXbXn/HzDaxxy85+YKAf1q9dXENpbyXF1LHDBGNzySMFVR6knpVLRdd0rXInk0fUbS+RDtY28yybT6HB4oA0qKKKAMHXvB3hzxBeQ3et6LYX1zDwks8IZgPTNbkaJHGqRqFRRgKowAK8A/al+I/iXwP8A2NbeGpls1uw7y3Plq5JGMKNwIHrXd/ALxZq3jP4b2Wra+ii+aR4jIqbBMqnh8dPbjjigD0aiiigD5i/aX+LPi3wf42tNJ8PXC2FmtukzSGFXMxYnIywPAxjive/h1rV14i8DaJq2owiG8u7VJZUAwAxHUD0PX8a0NW0HSdYeN9V0yzvXj+4biFXK/TI4rQijSKNY41CIowqgYAFADqKKR2CKWY4AGTQBHJcwRyrHJNEkjfdVnAJ+gqQ1+cfj/wAVal4l+I2paol5OZZLwrb4cjYobCAenAFfofoXn/2LYfbDm58hPMP+1tGf1oAvUUUUAc/488Wab4J8MXeuaw7C2gAARPvSOeir7muP+EHxk0n4l3V7aWVjdWN5aoJDHMwYMmcZBHv2rxL9tDxTcT6/pfhmMlbS2iF3IM/fdsgfkAfzrqP2NfBj2OjX/iu5Uq19m2tge8an5m/Fhj8KAPpWiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCtdf6+3/AN7+oqzVa6/19v8A739RVmgAooooAKKKKAIbz/j2f8P50+D/AFMf+6KZef8AHs/4fzp8H+pj/wB0UAPooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPOvHnxk8I+CNfi0bWrqf7cyqzrDEXEKt0Lntkc4Ga7+yuoL6zgurSRZbeZBJG6nIZSMg14T8Xf2ff8AhO/G8mv2utCy+0qizxvFvwVULlTn0Ar2zw7pUWh6Dp+lW7FobOBIFY9SFAGf0oA0KKKKAOJ8e/C/wr47uba58Rae01xbjakscrRsVznacHkV1WjaZZ6LpVrpumQJb2VtGIook6Koq5XxN8Xfi3460X4savBaapcWdpYXXlw2igCMoMYyCPm3DnJ9aAPtmisDwF4ltvF/hHTNcsmUx3cQZgP4H6Mp9wQRW/QBwvxt8K6j4z+HGp6NosyxX0ux0DttWTawJQntkCvNP2X/AIXeJvA9/rF/4kSO0S5jWGO2WUSFiDncdpwPT1r6FooAKKKKAKWq6Tp+rwCHVLK2vIgdwSeMOAfXmrFrbQWlukFrDHDBGMJHGoVVHsBXlP7Tmq+ItI+GzXHhV7mGdrlEuJrYHzI4iDkgjkc4Ga5v9krXPFWs6HrB8S3F5dWcUqi2mu8liSDuAY8kdPzoA9/ooooA+MviH8VPiFp3xnvLCzvrqC2t74QW9gkY8uSMNgZGPmyDnPvX2TbO8lvE8q7JGUFl9DjkVDNp9nLdpdSWlu9yn3ZWjBcfQ9atUAFcT8atfHhn4YeINSDbZVtmiiOed7/IuPxau2rgvjf4KufHvw+vdG0+aOG8LpNCZMhWZTnaSOmRnnmgD4l+B2gf8JN8VNAsZFLw/aBPMf8AYQFzn64x+NfouBgYHSvnz9nD4M6t4E1i91nxKbX7Y8RggihfftUkEsTjvjGK+g6ACiivmn9qn4r6p4cv7Lw54W1BrO72efeTQ43qD91M9vX8qAPXvHnwu8KeOr23vPEWntNcwLsWSOVoyVznacHkda63SNOtNI0220/ToEt7O2jEUUSdFUdBXlH7L3irXfFnw8luvEdw93NBdNBFcOoDSIADyQOcEkZr2GgBaKKKAOJ+JPxM8O/DuK0PiGeYS3RPlRQR73IHU+wrofC3iDTfFOhWusaJcC4sLlSUcAjocEEHoQQRXmvx2+DZ+Jtxpt3baothdWaNF88ZdXUnPY8Guy+FngyHwD4LstBguGufJLO8xGN7McnA7CgDraKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCtdf6+3/3v6irNVrr/X2/+9/UVZoAKKKKACiiigCG8/49n/D+dPg/1Mf+6KZef8ez/h/Onwf6mP8A3RQA+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoryr4gfHbwb4NuXtJLqTUr9DteCyAfYfRmJwD7da4FP2rtD87DeHdR2Z+8JkOB9KAPpOivPfh78X/CXjsiHSr4wX5/5c7sCOU/7vOG/A16FQAUVQ1nWdN0S3WfV7+1soGO0PcShAT6DNWLK7t7+1jubKeK4t5BlJYnDKw9QRQBPXzJ+1v8Nr3VpbHxP4f0+W6uFAt7yO3Qs5AyVfA5PcZ+lfTdFAHhX7I2i67ovgXUU120ubOGa832sNwpVgNvzEKeQCf5Gvda5vxd458NeD/IHiTV7awaf/VrISWb3wATj3rb06+tdTsYLzT547i0nQPHLGwZXU9wRQBZoorA8deK9O8FeGbvXNYZxaW4GVQZZ2JACgepJoA36K86+FHxc0L4kteQ6VFc215aqHeC4C5KHjcCCc816LQAMAwIYAg8EHvTI4kjULGiooOcKMCuQ+MX9tj4a68fC/mf2uLf9z5X38ZG7b77d2K8L/ZHXxgviXWF1xdUGkm3yftm/Hnbhjbu743UAfU1Z3iS+/svw/qWoDbm1tpJxu6fKpP9K0a5H4u3Btfhf4pmCltunTjA75Qj+tAHyB8Jfid4tn+LekPdazf3cWoXiwz20kpZGRzggKeBjORjpivu2vzu+AMH2j4yeFUBwRd7+f8AZUt/Sv0RoAKKbLIsUTySHCICxPoBXkHhn9oHwp4h8aR+HbWK9ikmlMMFzKoEcj84HXIzjigD2GiiigChr+q2+h6JfaneuEtrSFpnJOOAM1+cGtX+o+P/AB9PdENLf6tdgIhPQscKv0AwPwr7t+PP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zjunSEyKgPBJrSdGvFXbLoTwV+WnTt8kc3Pq95OSZbqZz6liaiF5Ies0h/Gt8eHrYSbTI31ra0DwVZahG/nOQy8/WpjQrTe50zxVCnG7X4HASXBPUk/U01Zj6V19/wCFokuZIoj933q9pPg2KYp5mPzpLDVW7FLE03HmRwfmD+6aPMH9016rqHgOyS2bYo3r/Euaz08DwNb71ZzWjwVVGX9pUOrPODJ6Lik81gOgrrdS8Mxwt8jms9tEVVyxzWMsPNbnRDE05bM58s3sKYWPqK6OPSIycYq1HoEbD7tSsLMp4qnHc5At/tU0t7mu5tvCscknzrxXQaj4DtF0pHhUiX+LDZo+qVOxlPMqMGk+p5KTTSa6W50LypCMHiqUmlgdjWU8PNaHVCvCSumYua/T/wAO/wDIv6Z/16xf+gCvzQewIPBNfpf4fGNA00eltH/6CK5KsJQtc6ISUti/RRUVxcQ2yB7iWOJScZdgo/WsSzhfiB8JfCXje3k/tLTo4L4j5b22AjlU+5HDfQg1S+Evwf0X4bXd7d6ddXV5d3SCIyT4G1M5wAB64/KvS1IZQVIIPII70tAC1g+KvGHh7wmkDeI9WtNPE5IiEz4L464HXHvW9Xz/APtH/B/XviDrGmajoFxak28JgkhuJCn8WdwPP4/SgD3jTr611OxgvNPnjuLWZQ8csbblYHuDViuN+EHhS48FfD/S9CvbkXNzbKxkdSdu5mLYXPYZxXJ+JPj/AOEdA8aSeHbpb2SaGUQT3EcYMcb+nJycdDgUAevd6KajrJGrxsGRgGVgcgg96dQAUjKrDDAEe9LRQBSTStPS6FyljarcD/lqIlDfnjNXaKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAK11/r7f/AHv6irNVrr/X2/8Avf1FWaACiiigAooooAhvP+PZ/wAP50+D/Ux/7opl5/x7P+H86fB/qY/90UAPooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKxfGuvx+FvCeq65PC00djA0xjU4LY7V8o/8Lt8e/wDC4vsHnf6F/aP2T+zPs642b9uM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QN1J5OTjj8TXtYoAO9A60GqWqarp+kQLNql7b2cJOA88gQE/U0DLtLUFpdW95bpPZzxTwOMrJGwZT9CKnNABVa9u7eyt2mu5UiiUZJY/5zVfW9Vg0iwe5uTkAfKgPLH0FeP69rFzrF401w3y9FQdFH+e9edjswjhlyrWR1YfCyr67I6/VviByU0u3BH/AD0l/wABXKXviPVrx90t7KvbEfyAfgKyaBzXzNfHYis/elp2R69PC06a0Rc/tTUP+f64/wC/jf41o6f4p1ayYFbtpF7rL8w/XpW7o/gb7TZx3GoXBhLjcqKOR9TWZ4p8LSaLGs8cnnWzHaWxgqe2a1eHxdKHtbu3qR7XDzlyO33HSaP49gnZY9Rh8gnjzFOV/Edq7SCWOeJZIXDowyGU5BrwMdK3vDHiS40e4VXZpLRj80eenuK7cHnEk1Cvqu5hiMBFrmp6M9ioqGzuYry2juLdw8TjKkVNX0iaaujyWraMr31nb39rJbXsEVxbyDDxyqGVh7g0zS9NstLthb6baW9pAORHBGEX8hVuimIKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAK11/r7f/AHv6irIqtdf6+3/3v6irIoAKKKKACiiigCG8/wCPZ/w/nT4P9TH/ALopl5/x7P8Ah/Onwf6mP/dFAD6KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDhvid8T/AA98PLHzNXuPNvnGYbKEgyye+P4R7mvir4p/FfxD8Q791u5nttLDfubCEnYB/tf3j9a9E+NXwd8e698UtUvdPsH1GyvpQ8FwJlCxpgAK2T8uOler/B34A6R4QEOpeIRFqutj5lDDMMB/2VPU+5/CgDxT4O/s/wCr+LhFqXiIS6VoxwyqRiacewPQe5r63srPw38NvCDrCsGl6NZIXdievuT1Zj+ddMAAAAAAOgFfFH7U3j268S+Om8MadI7abpriLy0PE1wepPrgnaPxoA3PHf7UeqT3E1v4NsILW2BKrc3S+ZIw9QvQfjmuCT49/E5GEh1klM5wbGLafb7lfQXwP+BWk+GNKg1P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06vjD47eHfiHefGO8m0+21ieCSWM6fLbBzGiYGACOFwc5z3oA+z6Sqmircpo9il+d14sCCY5zl9o3frVygD4U/ao8Enwv8Q5dRtYtum6uPtCbRwsn8a+3PP4171+yj44PiXwJ/Y14+7UNGxDknl4T9w/hyPwFdp8Z/h7B8RvB8mlmVLe+icTWs7DIRx2PsQSK479nv4O6h8NrzVL3Vr+2ubi7jWJEt921QDnJzjNAHttZviSx/tHRbu2xlnQlf8AeHI/lWlS1M4KcXGWzHFuLTXQ+fXUo7KwwQcGu8+Fn+tvv91f61n+P9Bawv2vbdf9GnOSB/A3f8+tZXhjXJNEvGlVBJG42umcZr4+lH6li17TZHvVH9YoPk1ItcglbWL7ET485v4T61R+zzf88pP++TXoH/Cf2p+9p7/gwpf+FgWf/QPl/MVrLDYSTb9t+DM1VrRVuT8TgnW7dERxcMifdU5IFPh0+8uXCQWszn2Wu6/4WBZ/9A6X8xTJviFGqH7NYEMf7zcfoKX1XCJ61r/Jj9vX6U/xNDw/YR+FdCnur9lFww3MB29F+teZXcxuLmWZjkuxY/jV/XNdvdYcfapMRj7sS8KKy6wxmIhUUaVJWjE1w9GUW6lT4mWdPtnvL+C2jGWkcLXukESwQxxIMKihQPpXDfDjQygOqXKYYgrCGHIHdv6V3te5k+FdGk6kt5fkeZj6ynPlWyFooor2ThCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCtdf6+3/3v6irNVrr/X2/+9/UVZoAKKKKACiiigCG8/49n/D+dPg/1Mf+6KZef8ez/h/Onwf6mP8A3RQA+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAZJLHGVEjopbhQxxn6U+vj79pTwr471L4qG50my1W70+WOJbNrUMUjIUBhxwp3ZPPrX1X4SgvrbwvpMGrvv1GO1iW4bOcyBRu/WgDWooooAK87+NXwzt/iZoFtZSXrWVzaymWGUJuHIwQRkdePyq78YfHkHw78F3GsSRrNdFhDawMc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iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBixIrFlRVY9SByafRRQAUkjiNGdjhVGSfQUtNljWWJ43+66lT9DQB494f/aD8Ka142Tw5BDfRtNP9nhupEHlyPnA75GT617HXhPhv9nHRdF8eQ+If7Vup4YLn7TDZsgUK2cqC/UgHHYdK92oAKKKKAPm/wCNP7QOp+DPHc+gaJptnPFZqn2iW43ZZmUNgYIxgEete8eDtci8TeFtK1qBSkd9bpOFP8O4ZI/DpX5//G8zS/FzxSJo2SU37rtY5OO36YNfevw4sH0zwB4dspQBJBYQowx0OwZpgdHRRRSA4Xx98KvCnjvULa+8Q2Ly3cC7FkilaMsuc7WweR1rsNL0+10rTraw0+FYLS3jEUUa9FUDAFeP/tJ/E/WPh5p+kJoMNv8Aab53zNOm8KFxwBnqc1vfs/8AjzUPiD4IfU9Ytoob2G4a3dogQkmADuAPTrj8KAPTKKKKAPlH9tnQ2Fx4e1tF+Uq9o7D2+Zc/m1Xf2JdcL6d4h0SRiRFJHdRj03ZVv5Cvdfib4G074g+F5dF1R5IlLrLFNHy0TjoQO/GRj3rnPgz8IrD4ZC/lt7+W+vLzaryugUBAcgAUwPT6KKKQARkc02ONI1xGqqOuAMU6igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooArXX+vt/97+oqzVa6/wBfb/739RVmgAooooAKKKKAIbz/AI9n/D+dPg/1Mf8AuimXn/Hs/wCH86fB/qY/90UAPooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOa1fwJ4W1nWo9X1TQrC61KPG24kiBbjpn1x710oAAwOBRRQAUUUUAZHiXw1o3ieyW08QabbX9urblSZM7T6j0qzomkafoWnRWGj2cFnZxfchhXao/+vV6igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAK11/r7f/e/qKs1Wuv8AX2/+9/UVZoAKKKKACiiigCG8/wCPZ/w/nT4P9TH/ALopl5/x7P8Ah/Onwf6mP/dFAD6KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAK11/r7f8A3v6irNVrr/X2/wDvf1FWaACiiigAooooAhvP+PZ/w/nT4P8AUx/7opl5/wAez/h/Onwf6mP/AHRQA+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCtdf6+3/3v6irNVrr/AF9v/vf1FWaACiiigAooooAhvP8Aj2f8P50+D/Ux/wC6KZef8ez/AIfzp8H+pj/3RQA+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCtdf6+3/AN7+oqzVa6/19v8A739RVmgAooooAKKKKAIbz/j2f8P50+D/AFMf+6KZef8AHs/4fzp8H+pj/wB0UAPooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooArXX+vt/97+oqzVa6/wBfb/739RVmgAooooAKKKKAIbz/AI9n/D+dPg/1Mf8AuimXn/Hs/wCH86fB/qY/90UAPooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooArXX+vt/wDe/qKs1Wuv9fb/AO9/UVZoAKKKKACiiigCG8/49n/D+dPg/wBTH/uimXn/AB7P+H86fB/qY/8AdFAD6KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooqN54UcI8sauf4SwBoAkooooAKKKKACiioLK9tb6JpLK5huI1YoWhkDgMDgjI7g9qAJ6KKKACiiigAooooAKKKajq4yhDDpkHNADqKKKACiiigAooqC7vLazQPeXENujHAaVwgJ9OaAJ6KbG6SxrJGyvG4DKynIIPQg06gAooooAKKKKACioFvLZrtrVbiE3SrvaEOC4X1K9cc9anoAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooqOe4htwpuJo4gx2qXYLk+gzQBJRQCCAQcg9CKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAopskiRjMjqo6ZY4pwIIyORQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAFa6/19v8A739RVmq11/r7f/e/qKs0AFFFFABRRRQBDef8ez/h/Onwf6mP/dFMvP8Aj2f8P50+D/Ux/wC6KAH0UUUAFFFFABRRRQAUUUUAFFFFAHE/FvxufA3hhbu2txdapdzLa2Nuc4eVumcc4H68DjNYdzr+t/Dr4ZajrnjrUU1bWGl8yOGJBGkbuFVIFI6qCCS2OmeuOcP9qXQNd1XQdCv/AA5bXdzNpt2ZHS0UtKmQNsgA54K9R0zmub8a6B428Vfs66V/a9rd3Ou2t4LqWB0P2iSACRFyo5LYcHGM4HPNAHrnwstvFn9lTal42v4przUNk0VlDEESyTB+TPc8jOemOprtq8x/Z6m8Vz+BC3jYXf2r7SwtzeKROYsL97PP3t2M849sV6dQB8yaz8Svidf/ABI8R+H/AAfBbXiadcShYhbpuWJX2gksRnqK3PhJ8Q/HGq/FGbwx4yW3heC3eSWBYVVlYBSvIJ7NWZ8J721sv2j/AIgteXMFujfaAGlkCAnz09ak8IXMN1+1l4gmtZo5oWtm2yRsGU4iiBwR7igDo/2sbpV+F0RimUOdQixtbn7kh/pXoPwtmV/hv4U3SBnOlWuctk58la+YfjH8FLfwB4QGsw61NfO1wlv5T24QYYMc5DH0r0X4IfBe30qbwt41XWpZJXtFu/sptwADNCfl3bu2/wBOcUAVdX/aJ1S01/U9NsvCS3n2K4kgLpcOSQrFdxAQ4ziuh+FXxqvvG3jRdBvPD6aafJklZzOzMCuONpUetc/+zl/yVb4j/wDXw/8A6PkqLwh/yd14g/65S/8AotKAPpGiue8f6VqWt+ENT07RL37BqNxGFhufMaPyzuBzuX5hwD0rwf8A4U18Vf8Aofz/AODO7/8AiaAPpmvlX46/8nIeFfrYf+lBqHxZ8OfiT4X8OX+tal8QHFpZxGRwup3W5j0CjIxkkgD3NeNXEniDU9Z0ua6ur651K82fY5p52eRh5hVCrE5Hzg4oA/RWivjP4ZeG/iB8QNOu7vSvHNzbvazeTLBc6lch1yMg4GeDyPwNdp/wpr4q/wDQ/n/wZXX/AMTQB9MUV5x8GvCHinwnbarH4u13+2HuHjaBvtMs3lgBtw/eAYzkdPSrfxZ+JWl/D3RTNdMs+qTKfstkrfM5/vN6KO5/Ac0AYX7QfxKj8E+G2sNOlH9v6ghSAKRmBDwZT/Iep+hrxD4J+Kn+E/iWWHxjpd3a2mswRSLcyKwaJeSH2/xKdwz3GPqK6j4OfD7VPiD4mfx94+DS2zyedbQSLgTsPunaekS8YHfHp194+IPgnSPHWgvpmsRcjJguEH7yB/7yn+Y6GgDobG7t7+zhu7KaOe1mQPHLGwZXU9CCK4Tx18T7Pwj4z0Tw7c6fPcT6r5YSWNwFTfJsGQffmvDfC/iDxT8CfFy+HfEME2oeHbmT9z5QLBgTjzIffkbk9T7gnb+PziT44fD6UBl3C1IDAgjNyeoPSgDoP2vbme18GaK1tNLCxvyCY3Kkjy29K9k8Jkt4V0ZmJJNlCST3/divFf2xf+RJ0T/r/wD/AGm1e0+Ef+RU0X/ryg/9FigDWr5h8W+KNc8V/tGWWi+GdVvLSxs5FtJTbTFVZUy87MBwcfMvP90V7f8AFjxfF4J8DajqzMougnlWqH+OZuF/Llj7Ka8P/ZB0UXd/4i8Q3f7y5XZbRuzZOWJaQn3OE5+tAHv/AMQPEkHhLwbqut3DKPssDGNW/jkPCL+LECvDv2SoSLfxB4h1XU/3l1P5KxSz4Bb78jlSepLLzjsaoftI+Irnxj4x0vwB4d/fNFOv2gKeGnYYVSfRFJJPbJ/u15x8Vvhd/wAIHrmiad/a5vjqK8v9n8oRncF6bjnr7UAfbn9p2H/P9a/9/l/xo/tOw/5/rX/v8v8AjXzr/wAMtQ/9DbJ/4L//ALZR/wAMtQ/9DbJ/4L//ALZQB9KqQwBUgg8gjvXnGu/GnwPoesXml6lqk0V7aSGKVBaSsFYdRkLg132mWv2HTbS0D7xbwpFuxjdtUDOPwrzT4i/D7wHZWGteKtY8MTalcqGubgW80u+Q9zgOAB3J7AE0AJ/wv/4d/wDQYn/8Apv/AImvJv2jvib4X8a+E9NsfDl/Lc3EN6JnVrd4wF8txnLAdyK6f4ReHfhV8RdJklg8MRWmqW5xc2ZvZ2Kg9GU7xlT69jx9ef8A2l/h34W8I+EtMvPDmlLZXUt8IXcTSPlPLc4wzEdQKAO28CfG7wLpPgfw/p9/qk0d3aafb28yC0lba6RqrDIXB5Brc/4X/wDDz/oMT/8AgFN/8TWX8Pvg54E1PwL4dv7/AEFJrq6063nmkNzMN7tGrMcB8DJJ4HFcT8RrL4WeEvGOl+HrLwZ/a97NIq3cVveT74Q3CKo34LnIODjjHrQB7f4H+I/hnxvd3Nt4cvZLmW2QSSBoHjwpOB94DNdhXK+DfAPhnwfPPc+HNKFhNcoElPnSOSAcgfMxHX0rqqACivnfxd4a+NFx4o1abQtVkj0qS6ka1X7Yi7Yix2jB6cY4rH/4RT49f9BqT/wOjoAoeJkPwj/aJg1aMGPRNVfzXx90RSnEo/4C/wA2PQLX1cpDKGUggjII718ieJ/hP8XPFBtjr80V/wDZt3ledeodm7GcfXaPyrXtfBvx4tbaK3g1h0hiQIi/b0OABgDmgD6lor4Z1vx38StJ8Qvoknii7udQSQQmO0mEw8wnGwFRy2eMDvxX2h4RW/Twpoy6yXOprZQi6LkFjLsG/JHGd2aAOR+NPjXWvBOj6fdeH9LTUp7icxPG8bvtXaTnCHPWvIP+F++Pv+hOt/8AwGuP8a+o6KAPlz/hfvj7/oTrf/wGuP8AGqd5+0l4usZRHe+HNNt5CNwSWOZCR64LdODX1DrmrWWhaRd6nqk629laxmSWRuwH8yegHc18jeD5X+Nfx4F7rPy6bApuRasc4t4yAkX4swLeuWoA6GL9oPx1LGkkXhK0eNwGVlt5yGB5BBz0p3/C/wDx9/0J1t/4DXH+NfUgAAAAwBRQBg+A9XvNf8H6VqmpWy2t5dQ+ZLCqlQjZPGDyPxreoooA+TPC/ij4t+Ndf1my8Na/GBYSHcs0cKAKWYDB2HPSuq/sL4//APQwWH5w/wDxuvNvhToPjDXPGHiceCNdi0eWFybhpHYCQGRtowFbOMH/ACa9U/4QL40/9D/Y/wDfb/8AxqgCp/YXx/8A+hgsPzh/+N1meJV+OnhzQrzV9S8Q2gs7RPMk8sQs2M44Hl89a3v+EC+NP/Q/2P8A32//AMarm/iP4M+Ktl4I1e58QeM7S+0qKLfcW6O2ZFDDj/VjvjvQB63+z/4h1TxR8N7XU9du2u7555kaUoq5CtgDCgCvR68i/ZY/5JBZf9fM/wD6HXrtABRRRQAUUUUAFFFFABXz1+2TdhPDHh60B+aW8klH/AEx/wCz16b8YLfxfc+Fok8AStFqwukLsHjX91tbdy/HXbXyV8Trbx9c+JdJ0TxvO93qrqPsUJlibAlfYOVOBuZMc+lAH2l4Gsv7N8FaBZYwbewgiP1WNQa2J5UggkmlbbHGpdjjOABk18r6lafHjRtHur67v3hs7KBppX+0Wx2xouScDk8A8V3nwB8T634q+GPiK98RX8l9PHPLDHI4AwohRscAd2P50AdP/wALv+Hf/Qxx/wDgLP8A/EUf8Lv+Hf8A0Mcf/gLP/wDEV4d+zd8OfDfjjSdauPEVnJcSW00aRFJnjwCpJ+6RnpXb/FX4M+CvD3w81zVtL06eK9tYN8Tm6kYA7gOhOD1oA9t8M+INL8T6THqeh3Qu7GRmVZQjKCQcHhgD1rVryb9l7/kj+mf9d5//AEY1es0AfLdj8U/in4h8U61pnha0sLz7BNIpUQopVA5UElmGa2v7e+P3/Qv2X/fMP/xyvNvh34k8TeG/iR4um8JaC2tTzSzJLEsbvsXziQ3y9OeOa9Q/4Wn8Vv8Aom0v/gPPQByejfFf4ta14ivNC0yysJ9WszIJ7cQICmxtrclwOGIHBrpf7e+P3/Qv2X/fMP8A8cryfwH4p8VaZ8V9b1jRvDjX2uXTXJudPEUjGHdKGcYHI2sAOfp1r17/AIWn8V/+ibS/+A81AD/hP8SvGusfFJ/C/i6O0hMMUpmijhAZXUAgbgSO9fQNfJvwW1DUdV/aOvr7W7E2GpTx3DzWpRlMTbRxhuemK+sqAPGvG3xtl8MeKL/Rl8I6jfC1YL9oilwr5UHj5D64614R8cviZceObrSdmk3ui/Y0kyssxJl3lecbRwNvv1r6G+JvxS1fwd4iTTdP8HXmswtAs32mKV1UElhtwI25G317186/HXx7qPjmfR21Pw5caEbNZQizSM3m7ymSMovTaPXrQB67B+0XN5Ef/FDaqTtHImJB47Hy667x38R9R0/4Mw+MdJsktL2YxYtrsF/LDPtIONvNcZB8ffEQjRR8NtROFAyJpOf/ACDXQ/tH3TX3wLkupITA87WspiPVCzKdv4ZxQBxmifEX4165pVvqWleGrC4sbgFopRb4DAEjIBkB6g0/w58WviM/xL0jwt4g03Treae5iW5hjgJkSIkFjkOQPlyeeg5r0P4c3+oaV+z5pN5ounSalqMWnloLZCMu2446kZA6kDkgYHNcJ+y+dJvNb17U9ZvjN46uJX86C5QpJFHn5ioPUk9cdMAYHcA+j68F+Mnxc8VeEfiBD4e8NaXp9/51tHKiSW8sszuxbIARxn7vTFe9V8x/FS/tdM/ai8NXmoTxW9pFDbtJLMwVEGZOST0FADP+FxfGD/oQ0/8ABPef/F13HwD+KOveP9T1u18QWWn2psEjKrbRSI25mYENvdumPau7/wCFkeCf+hr0P/wOj/xrwX9nFri8134kto0o+0zwsbWQMAN5aXY2fqRQB1/7YR/4t9pK+upr/wCipa9T+GqeV8OvCsf93SrUf+QVr5L+M+kfEqw0Swbx/qQutOe4IhVZkcLLtPUAA/d3frXZ+HvDPxxOgaYdN1lIrH7NF9nja5jyke0bQfl7DFAH1LXF/FrxFrvhfwoNQ8L6V/auofaEj+z+RJL8hBydqEHjA5rx/wCCfivxrP8AGG98NeLtYluxZ28wlhypTzFK8ggDPWvpSgD5eu/jb8T7S2luLvwVFb28Sl5JJdOulVFHUklsAVW0r4+fEPWI5JNI8K2V/HGdrta2VxKFPoSrnFb/AO0p4vutZ1Oy+HPhcma/vJE+2eWe5IKRH0H8TegA969d8C+EY/BHgWDRdG8k3cUTM0sgO2W4I5dsc4zjjqAAO1AHiP8AwuT4sf8AQhj/AMFd3/8AFV6745+Jlh4E8OaLqXiCyvHk1BQDFaouUfYGYEOwx1rmfgZ8StU8S6trvh/xeI4dfsZndY1QINgO1kA/2W/EhvbNc5+2UP8Aim/Duf8An7k/9AFAHpPxnvZP+FOa9e2kksEjWayIyttdcsp6joeayP2Zbq4vPhPZzXlxNcTG5nBklcuxAfjk1c+Lv/JB9Y/7Bsf/ALJWd+y1/wAkhsv+vmf/ANDoA2/jR441DwF4cs9R0vTo9QmmuhA0b7sAFGbPy/7o/OvGv+GkPFP/AEKdr/5Fr6looA+Wv+GkPFP/AEKdr/5Fo/4aQ8U/9Cna/wDkWvqWsjxR4k0jwtpMmpa9fRWdon8Tnlj/AHVUcsfYUAfOH/DSHin/AKFO1/8AItV2/ae10Eg+H9NDDqDJIDUnin4p+LvilqreHfhzY3NpYOcPKp2yunTdI/SJfYHJ9TnFej/Cf4G6P4QMWo615eq64PmDMuYYD/sKep/2jz6AUAexISUUnqRmloooAKKKKACiiigAooooArXX+vt/97+oqzVa6/19v/vf1FWaACiiigAooooAhvP+PZ/w/nT4P9TH/uimXn/Hs/4fzp8H+pj/AN0UAPooooAKKKKACiiigAooooAKKKKACiiigAooooA+QtL8AWPxD+PXjnT9Turm2htpp7gNb7dxbzlXB3AjHzGrPw+06x+HHx18R24kuLmw0bTJ52chTI6LCkjccAnk46Vk2Pjm+8G/HLxtqGlaO2rSzXN1btCpbKgTg7vlB7rj8a2fhFqreNP2gNXv9Z0xLYahYzJPZSjeu3YiFWDAZBA5BHegBfjr8YfDnjrwQukaNBqUd0LqOcm4iRV2qGB5Dnnkdq7X4YfHLwtHovhTww1vqv8AaIgtNO3eSnl+btWPOd+due+M47Vyvxq8L6Fe/Frwb4R0DR7GxEpEl59jgWLcjuM7ioHRI2Ptu969O8Dt8Pte8Y61pWleELCy1PQZxuklsIUJdXI3RkZPDKDnjqKAOK/ZwO74q/EYjvcMf/I8lReEP+TuvEH/AFyl/wDRaVL+ziMfFb4jgdBcP/6PkqLwh/yd14g/65S/+i0oA+kKKWvL/jl8ToPAeifZrFkl8QXiEW8fB8lehlYeg7DufYGgDz/49a3c+O/G+k/Dfw7NlfOWS/kXorYzg+oRcsR6kDqK5b4u6ZbaN8efBGmWKBLW1j06GNR2UTkD8eK9S/Z3+HU/hzTJ/EfiBWfxDqo3t5oy8MZO7BJ53MeW/AdjXnfx2/5OQ8K/Ww/9HmgDS1qVvg58eP7SOY/C/iIkzf3YyW+Y/VHO7/dbFfS8Uiyxq8bBkYBlYHIINcd8V/A9t498JXWlT7Y7oDzbScj/AFco6fgeQfY15R+z/wDEW40i/b4feNS1tqFnJ9nspJj6ceSx/wDQT0IwPTIB9FV5X8QfhHoHiDxHceKdQMzyRWjmS1Dfu5ZEX5HPfgdQODge+fVKo6//AMgLUf8Ar2k/9BNAHyP8MrX4o+PdPupdA8YzQQWbLCyXN7LGeRkYCqeMCuq1PwD8ZdO026vZ/HCmK2ieZwmoz5KqCTj9314rS/Y5YL4c8SMxAAuoySew2GvX/ilqMOn/AA38SXLyomdPnSMswALshVQPxIoA87/ZpvLrxd4Iub7xRPJq9zZ6szW016fNaErFHgqT0xuP51y/7Qv/ACXTwB9bb/0qNdh+ybbGD4VtIRgXGoTSj34Rf/Za4/8AaF/5Lp4A+tt/6VGgDY/bF/5EnQ/+v/8A9ptXtPhIgeEtGJIAFjDkn/rmK8W/bF/5EnQ/+v8A/wDabV7T4R/5FTRf+vKD/wBFrQB8m/GXxNe/FfxzJpfhz97o2jwzSo+TscIuZJifTgBfw/vV0PwAv9Z0z4QeNrzw1ai51WKZTCh6j92MsB/EQMkL3Ix7V62Ph9o3gzwr42uNJi/f6lb3Uzuw/wBWhRisS+ijJ/ziuH/Y4/5FTX/+vxP/AEXQBJ+zL8PZ7KCXxnr4dtT1AMbUS8usbcmVv9p/5f71c7+15cCz8VeE7jbv8qJ5NucZxIpxmvqGvmP9rJFk8a+DUkVXRkZWVhkEeamQRQBsr+1BohAJ8PamP+2iV0fw/wDjrpfjTxbZaDaaPe281yJCJZJFKrsQueBz/DXo/wDwinh3/oAaT/4Bx/4VNZeH9GsblLiy0jTra4TO2WG2RGXIwcEDPSgDSlkSGJ5ZXVI0UszscBQOpJ7Csd/FPh1gUbXNJYEYKm7j5H51e1rT01bRr/TpXaOO7t5LdnTGVDqVJGe/NeGf8MxeHM5/tzV8/SL/AOJoAz4PAdjoPxktfEHg/wAU6Np2iOWmuI/tcZ2ZPzQhN3Kt1H938BmX9rPWtK1HwZpEOn6nY3Uw1AOY4LhHYKI3BOAemSOfcVB4j/Z/8GeHNGudV1jxLqltZW67ndhF+AA28kngDvXz3e+H7pNCl8QQQyx6G98bO2ec/vJDhm7DBwF5I4yeO+AD7L8G67p7fCPQrOx8R6Xp+p/2NbxRyyzRt5EnkqMlCw5B7GuD+CngnR/DWrXXiTxl4h0W88QySuIT9vjkEYJOZdxPLN+gPqTjxHQfBmnWvibR7Lx3c3Wm6Zq1lFdWl9b7dn7xVZdxYYAGSp9Dz05r3Rf2Y/DjYYa5q7A8gjy8f+g0Ae12/iTQ7mdIbfWdMlmc7URLqNmY+gAPNateLeFv2fNC8O+ItO1i11bU5Z7KZZkSTZtYg9Dhc17TQAUUVznjbxpofgvS/t2v3qQK3+qiX5pZj6IvU/y9cUAdDLIkMTySuqRoCzOxwFA6knsK+avi/wDGq61u8/4RT4a+dcXFy3kve24JeQnjbDjt/t/ljrXOeIfFvjT446ydF8M2ktjoIP7xN2EC/wB6eQfmFH5EjNe7/Cf4WaN8PrLfCBeaxIuJr6RQG91Qfwr+p75oA5v4H/BmDwakes+IBFc+IXX5QPmS1B6hT3f1b8B3J9noooAKjuJ4ra3knuJEihjUu8jnCqo5JJPQVW1nVbDRNNmv9Wu4bSzhGXllbAH+J9hya+WPHvj7xD8ZPEC+FfBNtPFo5b58naZlB5kmI+6g7L/MkAAC/ErxZqnxq8aWvhHwaH/sOGXLTEELKR1mf0Rf4R3J9SAKf7PNlPoXxj8T2OnKL250+yvYIFdvLEzJKirk87ckD6Zr6I+FXw80z4e6CLSzAnv5gGu7wrhpW9B6KOcD8epNeHfAb/k4/wAYf9v/AP6UrQBvfDn453tp4hufD/xOtxYXRnZUuimwQMTkRyL2Xnh/TGc9a+iVYMoZSCpGQQcgivOPjD8LNO+IGmGVfLtNdhTFvebfvD+5J6r+o7dwfFPhl8TNa+Fuuv4R8ew3H9mQt5alvme0HZkP8cR9u3I9KAPrOioLG7t7+zhu7OaOe2mUPHLGwZXU8ggjqK80+L/xh0jwHbyWdo0WoeIGX5LVWysPo0pHQf7PU+3WgDwH4n+EtV+FdzJeWXjJoL/U5i32PT5JIZDHkncxBHAJwM9ycd667wh8M/ihr2g2up3fjvVNMa5USJbzX1w0gQ9C3zDBPp9M88DHsfg98Q/HVwnivWNQs7O+uWE6C9ZxKuDlfkCEKOmB6dhWZJf/ABMk+In/AAhum+NLnUNQV/Lee3upDDGQMvuYrn5ec4B9OvFAHo//AAp34j/9FP1H/wAC7n/4uoL74JePr+0ltb74j3dzayjbJDNcXDo49CpbBrE8faD8U/BPhi41vVPiBvhiZEEUV1LvkZmAAXKgZ6n6A0eA/Dvxb8Y+GrbWrXxtNaW1yW8tLi5lDkKSu7hSMEg4oA90+EPg6fwL4Kt9DuruK7ljlkkMsalQdzZxg12lfM3we1XxlH8cLrw34i8RXWpxafFN56+czxMwUAHkDoWHUdq+maACiiigAooooAKKKKACvly+z4s/a4hjH7y20uVPoogj3f8Ao3+dfT9zIYbeWUI8hRS2xBlmwM4A9a+Rv2ePEel2HxU1y+8WTmx1fUN8UQnUqolkl3SKxP3WyABn3FAHvvx71BdN+EXiWVjgy24t1HqZGVP5Ma5X9nvT/sXwGMxUqbw3dxyOv3kB/JBWL+13r2zQ9G8NWuXu764Fw8ackovCjHux4/3DXrGjaL/wjvwytdI43Wem+U+O7iM7j+JyaAPIf2Nf+QB4k/6+Yv8A0E16Z8ef+SQ+KP8Ar1/9nWvM/wBjX/kAeJP+vmL/ANBNemfHn/kkPij/AK9f/Z1oAxP2Xf8Akj2mf9d5/wD0Y1es15N+y7/yR7TP+u8//oxq1Pi38U7L4bSaWl7p1xem/EpXyXVduzbnOf8AfFAHzt4K8Xap8OvH/im/i8NXmqC9nljCgtEFHmls52NmvQv+Gi9Z/wCie3f/AIFv/wDGal/4ai0f/oXNR/7/ACUf8NQ6P/0Lmo/9/koA8e8EfEW58O/FTW/E0GhSXk+oNc5sBKVaIySByN2wk7cY+6Pwr1z/AIaM1f8A6J/d/wDgW/8A8ZryjwJ8TbXw18Vtd8WTabcT2+pNclYEdQ6ebKHGSeDjGK9d/wCGoNH/AOhc1L/v8lAHM/Be/v8AX/2grvxBdaVc6el7FPJ5cgJCnaBjcQM9PQV9WV88/wDDUGj/APQual/3+SvYPhz4th8b+FLXXbW1ltYZ2dRFKwLDaxU8j6UAeWa98X/G2n6zf2lp8OdRureC4kijnSKbEiqxAbIjI5AB614n8Z/G2ueO9c0i11jw7PpF5bKVhtGR/NlMjDnDAE5KgDA9a+mPid8ZPDngmGa3SZNT1pQQtlbsDsYf89G6L9OvtXi/wimsfEvxBn8f/EHxHo9tPHKWtbSe7jjbeBhSELZVEHTPJOD2yQDrh8a/Ho6fDHUf+/Nx/wDG6s/GXW7/AMRfs5tqmr6VJpN9PcR+ZZyqytHtnKjIYA8gA9O9d94u+Jnhuw8Lavd6P4m0KfU4LSWS2hF7G5eUKSq7Q2Tk44ryjTfF1t8WvhdqWleNvFGieH79r5PKZ9iExoEbOxpATklhnPagDt/hX468NeG/hr4U0/XdXt7C7ksBMiT7lDIXcZBxg8qeM54ryT4r+J9G1P41+GNT8AzLNqKywxz3FupCzSGTAXtu+U4J7ggdq9NstF+FEvhTRdH8R+IfDeryaZB9nS5N+kDEEknAWTI5Pqa6r4e+D/hvaXL6h4JtdJuZ4Dg3Fvc/ajESOzFm2nHpigD0M5IGDivlj42aHa+JP2kNC0jUDKLS7t7eOUxMFbbmQnBIPpX1PXyf8fP7Z/4aD0j/AIRg41r7LB9lPyffy/8Af+X86APSf+GcPA397V//AAKX/wCJrjP2S7VLLxh42tYixjg2RKWOThZJAM+/FT+V+0X/AM94/wAtP/wqv+yP9pHinxn9u5u8R+d0+/vfd04656UAbX7YzgeEtAj7m9ZvyjP+Ne4+HI/J8P6ZF02WsS/kgr59/a2dtR17wVoUJ/eTySkj/faNFP6NX0jGixxqiDCqAAPagD5p+GHz/tT+LT/d+1/+hoK9v+J2r6voPgbVNS8O2YvNThRfKi2licsFJCjkkZzjvivDvgs32j9pnxzJ/d+3fpcoK+h/E2t2fhvQbzV9TLiztE3ylF3MBkDgfjQB8gfDez+I2ieI77X7Hwbd6hrF2Di71O1lUR7iS7DJUEnpnPA+tdDpHxF+LnjPxLeeH9HuLGx1K0EhnjWCJRFsYI3L7uQxA4r1D/honwJ2l1I/9uv/ANevEfhb8QtD8O/F/wASeJNTNyNN1D7V5JSLc/7ydXXIzxwDQBZ8QeGfiD8P/GGkeNtZaHUtRubwRv8AYyXaVtuCjKqgfMgYcZ6Gu6/bAmFx4S8LzBJIxJcO+yRdrLlAcEHofauz0349+CNS1G0sreW/a4uJUhiBtiBuY7RznjrXIftlf8i34d/6+5P/AEAUAd98XP8Akg+sf9g2P/2Ss79lr/kkNl/18z/+h1o/Fz/kg+sf9g2P/wBkrO/Za/5JDZf9fM//AKHQB63RRRQAV8ayaRefFP4/atouv6vdfZLW8u0jxg+XDFIQI0HReAOce5ya+yq+T/hD/wAnReIv+vzUf/RjUAfSvhHwto/hLSU07QLKO1t15baMtIf7zN1Y+5rboooAKKKKACiiigAooooAKKKKAK11/r7f/e/qKs1Wuv8AX2/+9/UVZoAKKKKACiiigCG8/wCPZ/w/nT4P9TH/ALopl5/x7P8Ah/Onwf6mP/dFAD6KKKACiiigAooooAKKKKACiiigAooooAKKK5T4q683hv4e67qcSuZo7Zki2qWIdvlU8dgSCfYUAeNfsyMup/Eb4ha1Ed0Us/yv2PmTSOOfotTeF/8Ak7zxF/16n/0TFUXwflv/AIdfAybxPb6PJql3f3Yna2VijmHIjUghW75bp0asH4aWGufEP4neLNcvNNutIg1HTZ4PNAYLE7osaAOQMkAZ/A0Ab/wjceNPjx4s8YuwewsA0NrIT8vP7tCD0/1aOf8AgVGkalZ6T+1ndrp15BPa6zbGNzBIHVXMYYhiD13RdP8AaFS+Hv2aYorTyNd8UX0lu5DPa2KeUhPqSxYE++2tG5+BKaL428Kar4HaK1trCYTXzXc7s8m11OFGCMldw7CgDm/gfrOn6B8Q/iXqGsXSWllHclXmcHapNw4Gce5AqP4X6raeIv2otc1TSZftFjJDMySgEBlCom7nsTS/BTQ7HxH45+KGkazD59lczFZUDFc4uHYYI5HIBr3PwT8PfDPgp55PDumrbTTqFklaRpHK5ztyxOB7CgDM+NHxDT4d+GFvVtJLm+umMNqu0+WHxnLt2A646nt3I8n+EPw+1PXLy4+InjwSXV04NzZW1wOZWAysjL2UYG1foemM/RWraXY6xZGz1W0hu7VmVzFMgZSVIIOD6ECrYAAAAAA4AFAHzd/wv3xj/wBCBL+U3/xFeR+P/HWq6/8AEnTfEV/o/wBhv7IwFLJg/wA3lvvXOQDyT6V93V8q/HX/AJOP8K/71h/6UGgDY/4X74x/6ECb8pv/AImpvFfgu6+MXgeDxZFpg0bxdAXT7P8AMouEQ8KxYA7v7rfh05H0ZRQB4N+zz8SNe1e+m8I+J7C8mvrBCPtjKQ8YXjbPnv2B6nuO9e16/wD8gLUv+vaT/wBBNTw2drDdT3MNvDHcThRLKqANJt+7uPU4zxmnXcK3NpNA5wsqMhPsRigD51/ZItY7/wAG+LbOYZiuJViYeoaMg/zq/F+zD4dDjzdc1Z4v7oWMH89p/lXA+Fl+JHwZ1bVbPTvDkuqWVzINzi1kmifbna6sh+UkHofyrqx8b/iKwwngB93/AF6XB/SgDs5vGdj8OPHXhr4caPoatptzFCsc4uCrRNJI4ZmBU7um48jJJre8dfDC08XeNNE8RXGpT28ul+XshSMMr7JPM5JPrxXkXw+0Dxv45+MNh4x8X6TLp1rZ/P8AvYGgUBVOxERjuPzHOfrz0Fei/Gj4qah8N9U05ItEj1Cxu4S/mGVoyrq2COFIxgr+dAHN/tjf8iVon/YQ/wDabV7T4R/5FTRf+vKD/wBFrXyF8Q/iDr3xkk0zR9K8PtEsMu9YrdmmZnYbQWbACgc/mcnivsfRbRrDRrCzdgzW9vHCSO5VQP6UAUPHH/Ima/8A9g64/wDRbV4t+xx/yKuv/wDX4n/ouvafHH/Ima//ANg64/8ARbV4t+xx/wAirr//AF+J/wCi6APoOvl39r5ZX8U+FFt8iZoZAmDg7t64we3NfUdfMn7V3/I9eCfo3/o1KAI/+EQ+PH/Qcm/8GC1peGvCvxqg8R6VNq+szSabHdxPdIb5W3RBwXGO/wAueK+jaKAAdK474hfEbw94Esmk1i7D3ZXMdlBhppPT5ew9zgV0PiKyudR0K/s7G8lsrueF44rmI4aJyOGH0NfPngL9nqe5vRq3xHvXup2bzDZxzFy5/wCmsmefov50AYen2nir9oHxLHd6pv0zwfZyfKiE7B/sqf45D0LdF/Q9R+1Tpdlovwy8O6dpdultZ21+scUSDAUCKT9e5Pc179p1jbadZw2ljBFb20KhI4olCqgHYAdK8O/bC/5EXRv+wkP/AEU9AHQr4C0/x/8ABLwtp98RDcJpNq9rdBctA/kpz7g9CO/1AI8z8IfEXxL8INWXwp8QLSa60qPi3nQ7mjTPDRsfvx/7J5HTjG2vffhd/wAkz8J/9gm0/wDRKVb8W+FtH8W6S+na/ZR3VueVJ4eNv7yMOVP0oAseGvEWkeJ9NW/0G/gvbVurRnlT6Mp5U+xANWtW1G00jTbnUNSnS3s7dDJLK5wFUf56d68D0D4E6p4V+IumaloPiCZdCWbfOvmNFPsHIjO3h1JGD04PSu7+PngvV/G3g+Oz0K62XEEwmNozBUuR0wT2I6jt+OCADwrxX8dPGus6zqF54Raex0SzHAjtEl2x5wJJWZWAJP4Dpz1MXwk8DH4uavea34s8RtcNDIBNarJuuZB1Gc/cj5wMZ6EDFfSHw3+H+m+CvCCaLHFDcyTpm+ldMi4cjDZB/hxwB6e5NeT+Mf2dbiDVn1b4d6ydNm3F0tpZHTyif+ecq5YD2I/GgD3vw9ommeHtLi07RLOGzsox8scYxz6k9Sfc81pivmH+zP2gtG+S2vJL2NehE1rNn/v58xp3/CR/H63H73SGlx3NrAf/AEE0AfTlFfMg8W/Hh+mg/wDkmn9TXofwbvPiTfarqEvxChNtZLABbxeTEm5y3JyvPAHc/wAVAEfxy+F+p/EG+0V9P1Y2ttCxjuYZWJjRTk+aiDgv/D2zkcjBrtPAHgjRvA2jLYaLAFJwZrh+ZJm9WP8AToK6ikNABXyx8Bv+Tj/GH/b/AP8ApStfU9fLHwG/5OP8Yf8Ab/8A+lK0AfVFef8Axe+GmnfELRfLk222rW6n7JeAcof7jeqH07dRXoFFAHLfDPwhB4H8IWmi288twY8vLK7HDSH7xUfwrnoB/Mk1l/8ACsvCNh4xvPGFzaQreMPNYzECCJ+d0oB4DHjJPQjIwSa72vGvih8K9e8deLkeXxNLb+GTGrNaElvLkHBCIMKcgZ3MSQT3FAGD8TvjTNqlz/wi/wAMY5b/AFO6Pkm9hXIGeoi9fdzwByPUdb8E/hhF4A0mW91J0m1+8XN1NnIiXr5an0zyT3P0Fa2j+GvCnwk8LXuoWdnKsVvFvurryzNcSgepA6ewwo68cmvE/EHjbxn8adRk0LwbZy6doJ+W4kJxlfWaQcAEfwLnPP3qAH/FHXbj4y/EbTfCHhZ9+jWUhea6XlGYcPLn+6o4X1JPqK+m9D0y20fSbPTrCMRWtrEsMSDsqjAryA+Hbj4J+Aornwho/wDb+qzXCLqDmNzJIu1uVC5KqpwAOeuTzzXIav8AGj4i6rYTWWk+CLqzu5VKecltNK6AjGVXaOfTOfpQBL+z9nWPjp471o/Mg89VPs9wCv6Ia+l68b/Zp8Aah4M8PX95rsH2fU9TdCYC2WjjQHaGx3JZjj6Z5r2SgBssiRRtJK6oi8lmOAPxpUdXQMjBlIyCDkGvNP2gPB2r+NfBCWOhXMUU8FytxJFK5RZkCsME+xIPPHH0rD/ZNub2f4XOl47tDDfyx2289I9qHA9txegD2iiiigAooooAK8Q/aT8E+F7zwvd+ItQmi0zWIFIhuFH/AB9Pj5YmX+In16jr0GK7/wCKXjq1+H/hptVurO5vCz+VFHEp2lz03vjCj3/IGvnrwv4X8WfHTxGuveLpprPw1E37tUBVSueUgU+uOXOfxIwADzf4beIrC1+Ieh6p41mvL6xsmUK0jmUxbQfL4OSUVsHaPw9D9y319a6n4Vub3T7iK5tJ7V3iliYMrqUPIIrnfFvwu8NeI/CNvoDWcdpDZx7LKaBQHtj6g9we4PXqeea4j4Q+APE3gbR/Fdvruoh9N2SJaW0bbo3+UkzDPK5GBj656A0Ach+yf4k0PQtD19Nb1nTtOeW4jMa3dykJcBTkjcRmvQvjT428Lal8LPEdpp3iTRru6lttscMF7G7udy8BQcmvC/gX8J9P+Iljq9zqt/eWn2SVI40gVRuyCSSWB9BXYfEL9nnSfD3gzVNV0vU9Uub21jDxwuiMH+YAjCqD0JoA9J/Zd/5I9pn/AF3n/wDRjV6tJCkhBdFYjpkZry79mi2ntPhLp0NzDJDKs8+UkUqw/eN2NZfxxv8A4lDXNP0jwLbk2F7CS1xbRYlRwcMHkY7UGCpBGDyaAOs+I3xB8MeA7QnVJI5tQZcxWEADSv6Ej+Ee5x7ZPFeM+FvCuv8Axt8SweJPF0X2DwtBn7LaxjZ5q5GVTvg4G5++MD/Z6f4efAG2tLtdY8f3f9saox3tbly0Qbrl2PMh+uB7GveURY41jjUKijAUDAA9KAPkD4c+EdG8RfG/xt4fv7GL+zgL9IY0UL5G24UKY/7pUcDHbjpW9p+qeIPgPra6T4gszq/g64kJt7hUGUycnaT0bqSh4PUHqad8FP8Ak5vxr/v6j/6UrX0tq2mWWsafNY6paw3dnMNskMyBlYfQ/wA6AMjwj4j8O+LdNF74furW6i43qoAeM+jr1U/WuhVFQYVQo9hivm7xh8B9X8P6kda+FuqzW8yfMLR5ykg9kk6MP9lvzNeq/Bm+8X3/AITM3jyJItQEzRRqYfKlZF4LOBxksDjAAwAe9AGH8WPhx4WfRvFvimXTEfVv7LncMSdiyLG2JAvTf059gevNeR/AL4U+HfH3hO+1LXDfCeG9aBPImCDaERueDzljX0r8Q7C51TwF4jsLCLzbu60+eGGPIG52jYAZPHU1wX7M/hbWfCfgrULLxDYvZXMmoNKiM6sWTy4xn5SR1B/KgDl/HXwE8IaJ4J13VLN9U+1WVlNcR77hWXciFhkbenFcd+z/APCfw7488K3+pa49/wCfDem3QQTBF2hEbptPOWNfRfxZ/wCSYeLP+wVc/wDotq8y/ZAyfhzrAU4J1WTB/wC2MVAEmufs9+CrLSL66ifVvMgt5JVzcjGVUkZ+Wsz9jc58NeIf+vuP/wBApus6v8dZ9PvtMm8OadJHNG8BuIhHuKkY3L+9wDj1H4V1v7OHgbVfBPhO9TX4kgvr24EvkK4cxoFAG4gkZ6ngntQB63Xy98T9WsLT9qDw/e3V3bx2ltHAJpTINsf3/vHt1HX1r6G8b6EPE3hLVdF84QG9t2iEpXdsJ6HHfBxXimk/swaRHtOr+Ib+4PpawpAP/Ht9AHd6v8cfAGmMyHXBdSDqttBJJ/49jb+teEfs8+ObbSPiTqNubOWVfEV0sUL7gvlZkY5Yc54bt6V7jpPwG8AaeUZ9JlvJF/jubl2z9QCFP5VxX7QEtj4D0C00rwf4XtrK81UmH+0ba0UNGOmxHA3eY2ePbOOegBiQXI+J37T1vdWmJtH0PBEgOVKwkkMPrK3HtX1FXkHwg8Dz/DT4cajqElotz4int2u5oC2OUQskAYA49yAeSeuBXC6j+0rqU9lLbad4Olg1J1Koz3LSBGx12CME49MigBf2bx9q+Mfju+67vO5/37jP/stfR2p6faarYTWOpW8V1ZzDbJDKu5XGc4I/CvD/ANlTwfq2h6ZrGs67azWsupNGkMc6lZCi7iXIPIBLd/7ue4r0T4ueML/wT4Yi1PS9K/tSZ7lIDFuYbQwY7sAEnkAY96AH/wDCrvA3/Qq6R/4DLXzz8HfDGiar8dvFulalpdpc6bbfbPJt5IwUj23KKuB2wCRW9/ws74x66xXRvCH2VD91zp8g/wDH5G2n8q5rQPhT8WhrV5rEDjSNSvi5uLn7akbvvbc3EWcAsAcACgD6Qt/hv4MtJ47mDw1pMUsLCRJFtwCjA5BB9q5j4/fDzV/iHpGl22iT2MMlpO0r/a3dAQVA42q1ecf8M9+Mda+bxL40RyeoLzXX/oRWvcviL4r/AOEE8Hy63PZvfx27RpKiP5ZwxC7hkHuRx70AYvxmhe2+CGuwS7d8VgiNtORkFRxWV+y1/wAkhsv+vmf/ANDryn4n/H+z8WeCb/Q9N0a5tpb0KjzTSqQihgxwAOScY7da9m/Zz0q60j4S6RFfRNDNMZbjY4wQruSufqMH8aAPS6KKw/HGq3mh+EtU1TTLVbu7tITMkDZxIByRxz0zQBuV8n/CH/k6PxF/196j/wCjGrTk/ahuoVaOfwgi3AGOb8gA/wC75ef1qr+zRoet6v8AEnU/GWo2ckFrKs0jSuhVZJpWyQmeoGWOe3HrQB9T0UUUAFFFFABRRRQAUUUUAFFFFAFa6/19v/vf1FWarXX+vt/97+oqzQAUUUUAFFFFAEN5/wAez/h/Onwf6mP/AHRTLz/j2f8AD+dPg/1Mf+6KAH0UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUEAgggEHqDRRQAyGKOCJIoUWONAFVEGAoHQAU+iigAooooAzNM8P6PpV5c3emaXY2l1csWnlggVGlJJJLEDJ5JP41p0UUAFFFFABWLqXhXQtT1WHU9Q0mxudQh2+XcywK0ibTlcMRkYPIraooAKKKKACiiigBB0oAFFKKAAADoBRRRQAUUUUANljSWNo5UV43BVlYZDA9QR6VX0/TbHTUddOsra0VzlhBEsYY++BzVqigArK1fw5ous3EFxq+k2F9PB/qpLm3WRo+c/KSOOfStWigAoooNABRRRQAVQ1nRdL1y3SDWtNstRgRt6x3cCTKrYIyAwIBwTz71fooAitLaCztYba0hjgtoUEcUUShURQMBVA4AA4wKloooAKKKKACiiigAooooAKKKKACiiigAqlb6Vp9vcvcW9haRXD53SpCqs2Tk5IGTzV2igAooooAKKKKAGyxpLG0cqq6MMMrDIIqpo+lafotjHZaTZW9laR/digjCKPwFXaKAE7UEcilooAKKKKAOK+KGh+JfEmmwaT4c1O20yzut8eo3DqWlERAG2MDufmB5HHet3wf4dsfCfhyy0XSkK2tqm0FvvOScsze5JJrYooAKKKKACiiigCC/srXUbKazv7eK5tZl2SQyoGRx6EHg1JDFHBEkUMaRxIAqogwFA6AAdBT6KACiigkAEk4A6mgAOKQkAc0dDRjmgAVVUYUBR6AYpaKKACiiigDOs9C0my1Ca/s9LsLe+m3GW5it0SR9xy25gMnJ5OeprRoooAKMCiigAooooAhvrWC+s57S7iSa3nRo5I5BlXUjBBHcEVS0DQdK8PWj22h6fa2Fu7+Y0dvGEVmwBuIHfAH5Vp0UAFFFFABRRRQAVHPBDcBBPFHKEcSKHUNtYchhnoR61JRQAUUUUAA4GB0oooJABJIAHJJoAAABgAAe1FFFABTJoo5o2jmRZI26qwyD+FPooAoro+mI4ddOs1cHIYQKCD+VXqKKACiiigBrRoxyyKT6kU6iigAooooAKKKKACiiigAooooAKKKKAK11/r7f/e/qKs1Wuv8AX2/+9/UVZoAKKKKACiiigCG8/wCPZ/w/nT4P9TH/ALopl5/x7P8Ah/Onwf6mP/dFAD6KKKACiiigAooooAKKKxPGniSx8JeGb7WtTbFvax7ggODI3RUHuTgUAUbvx/4bs/GUfha51AR63IE2QeWxDFuQu4DAOOcHHBFavijXbHwzoF7rGrSGOytE3uQMk9gAO5JIAHqa+d/2bNEuvGHjjW/iFrhEjxzPHDnp57gFsegVGAA/2h6VF+0d4rvfGPiS38B+E4J7828m+6S3Ut5kw6Lx/CgOSTwD1xtoA+iPCPiXTPFuhw6voksktlKWVWeJozkHBGGA6HjI4rZr5h8Oat8avD2hWOkaZ4StUs7OJYYw1uCSAOpPmcknJJ9TWl/wl/x2/wChVs//AAHH/wAcoA+jKK+VdS+MfxR0fxBaaPq+laZBqFwU2W/2clyGbaMAOepzX1VQAUUUUAFFFFABRRRQAUV5/wDGfw14o8UaBZWvgzWP7KvYrkSSy/apLfdHtYbcxgk8kHHtXkH/AAqT4yf9D1/5Wrv/AOIoA+n6K+Yf+FSfGT/oev8AytXf/wARR/wqT4yf9D1/5Wrv/wCIoA+nqK+Yf+FSfGT/AKHr/wArV3/8RXC3tj8SrP4jQ+CpfGOoHVZSoWRdVuTD8ybx83Xp7daAPtiivE/hN4C+Inh3xcl/4s8TnUtLEDobf+0p58ucbTtdQOPWu7+MUskHwu8TSwSPFKllIVdDhlOOoPagDsaoXus6bY6hZWF5fW8N7ekrbQPIA8pAJO0dTwK8n/ZQvbq/+G97Ne3M9zINUlUPNIXYDy4uMn8axf2ofBlx5dn460EPHqOmlFuWj+9sDZSQe6twfYj0oA+gaMVxnwk8aweO/BlpqsZVbxf3N5Cv/LOYdfwPBHsRXZ0AUNO1nS9Slki07UrK7ljGXSCdZCo6ZIB4q/Xy5+yM+/xh4t/2oVb/AMiNX1GOlABRXiviX9obw94f8QajpF1pWqyT2U7wO0Yj2sVOCRlulZv/AA094Z/6AutflF/8XQB7drmqWuiaPeanqDMlpaRNNKyruIUDJOB1rL8EeMtG8a6dPfaBNJNbwy+S5kiKENgHofYivB/Hf7Qvh/xD4O1jR7TSdViuL62eBHlEYUFhjJwxNcn8CvjBpHw98OX2m6rp+oXUtxdG4V7YIQBsVcHcw/u0AfY1FeB/8NO+Gf8AoCa1/wB8xf8AxdH/AA074Z/6Amtf98xf/F0Ae+VieMfE+meENDk1fW5JIrKNlRmRC5BY4HAq/p+ow3ukWuo58qCeFJx5hA2hlBGe3evJv2oNRspvhJexQ3ltJI9xDtRZVJOGzwM+1AHqnh3WbPxDolpq2mO0lldJ5kTMpUkZ9D06Vo15z8B9Qs2+FXhiFbu3ab7Ns2CRd24MQRjPWub8WftB6J4a8R6jo93o+oyz2UzQs8bJtYjuMmgD0jxp4z0LwXZ2914jvDaQXEnlRsIXky2M4woJHFbdjdQ31jb3ds2+C4jWWNsEZVhkHB9jXxz8c/i7p3xF0fTbHTdNu7U2twZ3edlOflwAApPr+ld74e/aR0LTNA0yxn0TU2ltrWKB2RkILKgBxz04oA+kKK80+Fvxd0z4iareWOm6deWr20PnM05XBG4DAwfevS6ACiiigAooooAKKKKACivIPjJpXxMvvENpL8P7xrfTltQsqieNMy73ycN/s7a4H/hHvj9/0FJP/AuCgD6dor5cvdH+PVnZz3M+qyiKGNpHIu4CcKMn+Vcz4D1/4veOlvj4d165mFn5fneZLFHjfu24yOfumgD7Jor5i/4R74+/9BV//AyCj/hHvj7/ANBST/wMgoA+naK4T4P2Xi6y8M3Efj64afVTds0bGRH/AHWxMDK8dQ1d3QBlaj4i0bTdTg07UdUsrS+nTfFDPMqNIM4yATzyDWrXyTasPix+0iLhP32kWEodT28iA8fg8h/8fr3r42+ME8GfD7UL1H231wv2W0APPmOCNw/3RlvwoA1vC3jrw74pv7yy0PUo7m7tCwmi2srKA20kZHIzjkZHNdNXyN+zr468HeBdK1WfX7qeLVryYJhbZ3xCoyMEDuWbj2Fev/8ADQXw/wD+gjd/+Akn+FAHrVFeTf8ADQXw/wD+gjdf+Akn+FeqWdxHd2kFzASYpkWRCRjIIyP50AS0ZrhPi3401TwVpNld6PoUutSzzGJ4o92UG0nd8qn6V5f/AML78W/9E7vP/I3/AMboA9fT4g+HH8bf8Ikt6/8Abu4r5HkvjIjMn3sbfugnrXWV8NQ+OtUX42nxaugSNqnmMf7L+fdkwGPH3d3Q7unavWv+F9eLv+idXf5zf/G6APouivnHxv8AHq5i8ALFbWLab4tv2ki+y5LNZJnAkOQDuIOVGPf0z6N8BNH8SaR4EgHi3ULm4upz5kNtOctax44QseST1wTxwOMGgD0iisHx5rM/h3wZrWsWkcctxZWrzxpICVYqMgHBBx+NfOln8e/iNfWLXtn4Vsp7MbiZ4rG5eMAdfmD4470AfVNFeP8Aw6+IviXxj8Kdf1+30+xbXLOeWG1toYnKSbY43AK7txJ3kcEdq8g8Z+N/i/8A2jplhq9w+gtqsgit4oUSPJLBc7hudQCw70AfVXijX9O8MaHc6vrMzQ2Fvt8yRUZyNzBRwAT1YU7QNc0/XtFtNV0yfzLG6GYXZShbkjocHqDXz/4h+HWs+EPg345n8Qa+2r3WoRWzyA722NFMDkO5y3U9h0rOXwvq3iL9njwnrPh28u49R0Qz3C20UhxIFnf5gv8AfXbke2R3FAH1JRXnXwP+IkXxA8LCWcqms2e2O9iXoSc7ZF9mwT7EEV6LQAUUUUAFFFFABRRRQAUV84a/8LPizeeINTutP8aeTZT3MkkEX9r3SbIyxKrgJgYGBgVR/wCFS/GL/oev/Kzd/wDxFAH07RXzF/wqX4xf9D1/5Wbv/wCIo/4VL8Yv+h6/8rN3/wDEUAfTtFfJPi/wL8WPCvhu91vUPG08traKGkSDWLouQWC8AqB39ar+BPCHxU8a+HIda0vxpcw2sruirc6vcq+VODwoI/WgD6+orC8DafqWleEdKsNduzeapbwBLi4MrSeY/c7m5P1NfP8A8XdU8X618a/+EQ8PeIbnTYbhI/KVZ3hRf3O9iSg3dj+NAH0vdXVvaQmW7nigiHV5XCqPxNY+i+MfD2uapPp2jaxZX95DGZZI7aUSbVBAzkcdSO/evn/UfgJFZafLrPj/AMcTm1tl3TSLEzlckD77MTySB92u38DfC3wxaeFZ9W8Bahetf6lp8sNpqstw6sm9cZ2qFwQQO2QR6igD2eivjbxFpvxC0j4kaZ4O/wCE61a4vb4RssyahcBIwxI5yc8AZr0D/hT/AMT/APopl9/4HXX+NAH0TRXzt+yprOt6vq3ilNa1vUdTS1WFI/tV08yqS0mSoYnGdtekfGP4hS/DvStPvYdK/tM3U5hMYmMe3C5zwrZ6UAeg0V8zf8NP3X/QmH/wOb/41R/w0/d/9Cb/AOTzf/GqAPbbr4ieGLbxhB4Xk1If23M/li3Eb/K23cAWxtBIxjnuK6yvhL4o+P5PGnibT9fstEfRtTtAuZY5zKXZG3I33VwV555zx6V6jF+07fLEgk8Hq7hQGYXrKCe5A8s4+maAPpyivmX/AIaevP8AoTR/4HN/8arsvhR8a7jx54qGjy+Hhp6mF5vO+1GT7uOMFF9fWgD2ioBeWzXbWq3EJuVG5og43geuOtT18ma94T1/wd+0PoN+16lx/bWsGaF43JcwmRfMVwemEcj0wDQB9Wtd2yXSWzXEK3LjcsRcByPUDrU1fJ3xw8Ja7oPxXsfFcF6jx6jqMC2RWQ+akgCgJj0GMcevvX1jQAUUUUAFFFFABRRRQAUUUUAFFFFAFa6/19v/AL39RVmq11/r7f8A3v6irNABRRRQAUUUUAQ3n/Hs/wCH86fB/qY/90Uy8/49n/D+dPg/1Mf+6KAH0UUUAFFFFABRRRQAV8dfG/xlqfxM1+903w7FK2gaFFLcyE5UNsB3Svnp/dUHnn3wPsWvNfHXhXSPDnwz8ey6RaLBLqFrdXNw/Uu7Kx69gMnA6D8TQBxf7Plpql38B9Tt/Dl3DY6tNdzrDcSJuCttQZ4744B5xwcHGKi8B6dofwN0221Lx1cn/hIdblaJ3jBm+zxjk8jkjO0swzyV9M1p/sy6jaaR8GLvUNSnS3s7a8nklkc4CgKn+cd64rwba3fxt+Ls/iTU4nXwzpLgQwv0IU5jj9CSfnbr6dxQB7D8eNVurD4O63qWj3lxaXIS3eK4gdo5FDTxjgjBGQSPxrM+Efi+Kw+BumeIfF2qyMq+eZrq5kaR3xPIFGTkseAAKsftKSJF8FfECuwBf7Oig/xH7RGcD8AT+FUfgRpNlrvwA0rTNUhWeyukuY5UPcG4k6ehHUHsRQAvgPwLoOseMv8AhZVprNzrK3yNJbpcKv7hz8vbHKAFAuOPU165Xy14F1a9+CPxLufCfiGd38NX7h7e5fhV3HCy+g/uv9M9ufqRSGUFSCDyCKAFooooAKKKKACiiigArzj4h/GHw94D1xNK1i11OW5aFZw1tEjLtJIHLODn5T2r0evmP4v2ttf/ALTXhSyv4I7i1mitUkilUMrqZJOCDwRQB1v/AA0t4M/58Ne/8B4v/jlH/DS3gz/nw17/AMB4v/jleh/8K48F/wDQqaJ/4BR/4V4d+1V4X0LQPD+hS6Jo9hp8kt06u1tAsZYBM4OBzQB9L2Vyl5ZwXMQYRzRrIobqARkZr5q8S/8AJ32nfWL/ANJzX0X4d/5AGmf9esX/AKCK+cvEp/4y/wBO+sX/AKT0AfTtcX8aP+SU+Kf+vGT+VdpXF/Gj/klPin/rxk/lQBwn7IX/ACTC9/7Csv8A6Kir2m8tYL20mtbuJZreZDHJG4yGUjBB/CvFv2Qv+SYXv/YVl/8ARUVe30AfPnwi8CeK/AHxX1q2s4fM8Izfenmk2h1ILRlB1Z1yVPGOvPSvfbyZbe1lmc4WNC5+gGalR1dQyEFT0Irk/i1qo0T4beI74tsZLKREb0dxsX/x5hQB4T+xrDu1bxVc+kNumf8AeaQ/+y19R18//sead5Pg/WdQIwbm9EIP94IgP83NfQFAHP3ngrwteXUt1d+G9FnuZWLySy2MTO7Hkkkrkn3qH/hA/B3/AEKvh/8A8F0P/wATVb4q+E7rxr4Rl0ey1AafM8qSeftJwFOcYBHWvkH4j+DNZ8A+KrLS9Y1qZrK6CSJfR7yuwnDnbnqpzxnpj1oA+nPix4M8L2Xw08S3Nn4b0S3uIrCV45YrCJXRgpwQQuQfevPf2VPDOh6z4L1WfWNF0zUJk1Aosl3axysq+WhwCwPGSaoD9nDV722Vv+Ezint5FDqfJdlYdQfv80Qfszarb58jxZFFnrst3XP5PQB75/wgXg//AKFLw/8A+C6H/wCJo/4QLwf/ANCl4f8A/BdD/wDE18Z/EjwpfeDfFFvoFvr8urajIq7o4A67HY4VPvHLHg49x619s+C9PuNJ8H6Hp182+7tLGCCZt2cuqAMc9+QaAI/FXhy38QeEr3w+X+x2tzD5AMCAeWoxjaOnbpXzH8YPgfp3gfwXNrllq93dSxSpGY5o1AIY46jpzivrmvF/2qdUsY/hlc2DXtuL6W4iKW/mDzGAbJIXrgDvQBy/wP8AhJplnpvh3x1c6xMk6IbtomRViUfMOSeQAOpr2KfUvAdxK8s974Yllc5Z3lgYsfUkmvH/AIRfEnQ9e8M6D8OFt79Ly7sZ7Oe5IRY4v3ch+XkknA9B1FX/APhmHw7/ANBvVfyj/wDiaAOe/amm8LzeHdE/4R6TRHuhdNu+wmIuE2c52c4zj9K9W8H3vgNfCmirPc+FxMtjAHDyW+4N5a5znvmuK/4Zh8O5/wCQ3qv5R/8AxNeQfGX4X2XgfxTommadqFzPDqKDLTIu6Nt+3PGMjBHHtQB9b6Zq3g6C5VNK1Dw9HcTERqtvPCGck8KNpyee1dPXhmg/s5aDo2u6dqcOtapJLZXMdyqOI9rFGDAHC9OK6743eIPFXh3w9Y3Pgqwkvr6S7EcsaWrXBEexjnC9OQOaAPRaK+U/+Fo/Gf8A6Fm6/wDBJN/hSf8AC0vjP/0LN1/4JJv8KAPq2ivlL/haXxn/AOhZuv8AwSTf4Uf8LS+M/wD0LN1/4JJv8KAPq2ivlL/haXxn/wChZuv/AASTf4V3nwZ8bfEPxB4uks/GOjzWWmi0eRZH06S3BkDIANzcdC3HtQB7jRRRQBmeKf8AkWNX/wCvOb/0A18zfsjeItI0u98Qafqd/Ba3V8bf7KkzbRKV8zcATxn5hx1OeK+mfFP/ACLGr/8AXnN/6Aa+Lvg58L1+I+leIDDfmzv7AweQWXdE+/zNwfuPuLgjpzwaAPuOlr5I0jx98QPg7qMek+MLKXUNJB2xiZs/LnrFNznj+E5x6CvonwD8Q/DvjmzEuh3oNwq7pbSX5Zovqvce4yPegDrq8s/aK8ar4S8CT21tJt1TVQ1tbgHlFI/eP+AOPqwr1MnAJAJ9hXxpqdprXxi8ceJNYvop7HStHtZmKN1t1jVtkXpvZgS3/AvQUAd5+xzYQLpfiTUj/rmlhgycfKqqzcHrzu5+grm/H2pXHxp+L9l4d0aU/wBh2DMnnIcrtBHmz+/ZV9ePWrn7PujX/iH4P+NNK0i+axv7mdUjmHQ/IPlJ6gMMgkdM16t8BvhqvgLw00moIja7fgPdNwfKXtED3A6n1PsBQB4f+0H4G8O+E/Ffhaz0DTvslveA+evnSPv+dR1ZiRwT0r3j/hR/w8/6F1P/AAKn/wDi68j/AGwWmj8UeFJLUEzrC5jAGSW3rjjvzipf+E3+On/QtSf+C0/40Aer/wDCj/h5/wBC6n/gVP8A/F16B/o2l6b/AM8rS0h9zsRV/M4ArxL4YeKfirqXjWwtPF2iSWmjSCTzpTZGMKRGxX5u3zBa9zuIY7iCSGZd0UilHX1BGCKAPOj8b/h2OviOMf8AbrP/APEUn/C8fh1/0Mkf/gLP/wDEVY/4Uz8Pv+hatf8Av7J/8VXEeOtJ+CngtXTV9LsnvV6WVtLJJMT6FQ/y/wDAiBQB5hb+NfD6ftMN4qbUB/YPns32rynxg2xj+7t3fe46e/SvS/iT+0NodnpZh8ETf2lqcoKi4eF0it/fDgFj6Acep7HxSTTk+JOt/ZPBHhjTtB06FstcS3DcDnBkdzj/AICoz9a9z8F/BDwFpNgh8QXVvrWok7mlkujHGvH3VRWGR/vZ/CgDy34N3fgmDW28WfEPxJHca2ZDJDbSwTSbHz/rXbZgt6DoOvXGPoaw+MfgG+vbeztPEMUlxcSLFEgt5huZjgDJTuTVA/C74XH/AJhOlf8AgU3/AMXWnZfCLwLZXkF3a+HraO4gkWWNxJJlWU5B+96igC58Yjj4W+Ksf9A6b/0GvPvgd/yblc/9cb7/ANnr0D4xf8ks8Vf9g6b/ANBrz/4G/wDJuVz/ANcb7/2egDkfgT480v4f/B671LWobyaC41+S3UWqKzbjbxNzuZRjCnvXLfFv4raD4v8AFvhLVNLtdSjt9Im82dZ40VmHmI2EAcgnCnqR2r0j9lbSdN1j4XahBq+n2d/CmtSusd1Csqq3kwjIDA84J596w/2hPD2j6d8QPh/Bpuk6daQXFztnjgtkjWUebGMMAPmGCevrQBL8Rvjz4U8UeBNZ0aysNaW5vIPLjaWCIIGyOpEhOOPSqXwd+N/hvwZ8PtP0PV7PVnu7Z5SWt4Y2QhpGcYJcH+L0r1fx54T8GyeE/Elhp2j+Ho9Yj0u4ljWG1hE0RCHa/A3D5sc+tcN+zLo3hrVfhlc3GtaLpF3PaXsySXF3axOwUKjcswzgBqAOp+DvxE8E65q91ofg3SL3TpZRJfS+ZAiK53DcSQ7HPzcDoBwMcCvXa8o+DPifwv4s1PWZfDnhS10ttPkMS30FrHGJo2Y7fmABBIXJXtxzXq9ABRRRQAUUUUAFFFBoAzvEer2/h/QdQ1e9WRraygeeRYgCxVRk4BIGfxryD/hpjwV/z469/wCA8X/xyvQPjB/ySvxX/wBg6b/0A15V+zL4Q8Oa58Nmu9Z0LTL+6+3Sp5tzbJI20BMDJHTk0Aav/DTHgr/nx17/AMB4v/jldj8NvipoXxCu7630S31GJ7SNZJDdRIgIY4GNrN6Vp/8ACt/BX/Qp6H/4BR/4V4j+yrEkPj3xxFEipGhCqqjAUCV8ACgD1f8AaB/5I74k/wCuKf8Ao1Kyf2Xv+SQ6d/13n/8ARhrW/aB/5I74l/64p/6NSsn9l7/kkOnf9d5//RhoA9Zr5f8AFl/aad+1rYXeoXUFraQxo0s0zhEQfZT1J4HUV9QV8/ePPhF4QHjm88QeM/FX2Cy1KYyRWskyxM7BRvHmOTkZPQAYBAzQBa+J/wAbPA0+ganods1zrb3kD25FrHtjUsMA72x0OCCobmqH7JXigtoWs+G9RfypNNkN1GJDt2RMfnBz02tyc/366/wrcfCLwoFOh6l4Ytpl/wCW7Xcckx/7aMS361yHxWtPB2u6VqUvg3xd4Z07WdRkDX0rXkYa7jwAYzJklF4BIXhsc5oAzfhxcL8QP2jNY8VQfPpGkxssEh4X7vlR/wDfQ3v+FfQfijV7fQ/DWo6rdSrHDa27ylie4XgD1JOAPrXlXgqL4beGfh5c+F/+Es0SUX0Dx3tyLyMNMzqVY9eAAcAdsfXPnk3wv+GsiiL/AIWjB9lBz5TXUBH4c4/SgDp/2NrLZ4a8RX5BzcXiQ7vXYmf/AGp+tfQ1cv8ADTRtC0HwdY2XhSZLnSwC6XKyCTz2J+Zyw4Jzxx6Y7V1FAHlnxX+MVn8O9dtNMu9KnvXuLcXAeOUIACzLjBB/u/rXEf8ADUWl/wDQt3n/AIEr/wDE13HxW+Lek/D/AFy107VNJub6Se3FwrxFMAFmXHzf7v61xf8Aw0x4a/6FvUv/ACF/jQBH/wANRaX/ANC3ef8AgSv/AMTR/wANRaX/ANC3ef8AgSv/AMTUn/DTHhr/AKFvUv8AyF/jR/w0x4a/6FvUv/IX+NAGh4W/aK07xB4k0zSItAuoZL64jt1ka4UhCzAZIx717r1+leG+GP2g/D+u+I9M0i20G/gmvriO2SRzHtUswAJwc969zoAK818I/D7Uh4xfxd431SLU9bRGhs4YEKwWcZz93OMtgkZwOp65zXpVFAHmdp8PtS1b4hDxP411KG9i0+aQ6Pp8CERW67vld8jl8BT9QOTgCvTKKKACiiigAooooAKKKKACiiigAooooArXX+vt/wDe/qKs1Wuv9fb/AO9/UVZoAKKKKACiiigCG8/49n/D+dPg/wBTH/uimXn/AB7P+H86fB/qY/8AdFAD6KKKACiiigAooooAK574hQWd54K1iy1LUoNMtby3a1a7nICRGT5ATkgHkjjIroa+av2ofENxr/iHQ/h9oZ826lmSW5RT1duI0OOmASx+qntQB2+k+GPC/wAO/hHd6Z4w1GHVfD8twZZJzasFO8qFwqFzkEAhgfyrpfCcHg+w+FoGiSxQeFJLWRmnlyu5DkO77gDk89f8K4j446Hb+G/2eTo9pzDZG2iDYxuIkXLH3Jyfxrq/gZBFP8GvDsM6LJFJaujowyGUu4II7igDxPwf8GrDx7pq3mnfEKfUNOglKPE9mwdCOPutKduR0OOh/CvpPSbHSfA/hC3tFmS10rTIMNNMwAAHVmPqSSfqa8q8H/CbWfBXxcm1Lw1fxW/hSdC8sEhLFgc/udvfB5D9h685uab441TW/jfr/gW+is7rw8InVkki+cL5S5XIOCCWPUHrQB1lpH4J+LFjYawsFvq8Gn3DrEZUIKOOCrKeqn5WwwwflOK7pFVFCoAqgYAAwBXyhpU9z8B/i/LYXbyP4U1QghzyBESdr/70Z4Ptn1FfV8brIivGwZGGVZTkEeooAWisLxn4s0fwbox1TxBdfZ7XeI1wpZnc9FVRyTwT9Aan8LeItL8U6JBq2h3S3VjNkK4BUgjggg8gj0NAGtRRRQAUUUUAFfLvxo1G10n9pjwtf6jMsFnbQ2sksrAkIokkyeOa+oq4fxn8LfCnjLV11PX7GW4vFiWEOtw6DaCSBhSB3NAFb/hc3w//AOhltv8Av1J/8TXi/wC05458N+LNC0WDw7qsV9LBcu8iojjapXAPzAV6n/woD4e/9Am4/wDAyX/4qj/hn/4e/wDQJuP/AAMl/wDiqAPRvDv/ACANM/69Yv8A0AV85eJv+Tv9O/3ov/Sevpi1gjtraG3gG2KFBGgznAAwK+ZvEREn7YNgqnJRogfY/Zs/1FAH09XF/Gj/AJJT4p/68ZP5V2lcF8d763sfhN4ja6lWMTWxgj3H7ztwFHqf/r0AcT+yRLHB8KtQlnkSOJNTmZ3cgKoEUWSSegrmPil8YdS8WamfCXwxjuJzMxikvIAQ83qIz/Cvq/H4Dk+V/Dm08X+M9K/4Qnw7I0WkNcNd3jjKxjcFXMrdx8nC9znrjj63+GPw30b4f6YYdOTz7+VQLi9kX95KfQf3V9FH45PNAEfwX8Kar4N8E2+l65qAvLgMZFjXlbcH/lmrfxDOTn1JxXk/7XHjaJbO18IWMoaZ2W5vdp+6o+4h+p+b8F9a7D4y/GvTPBtvPpmhyRX/AIhIK7VO6O2Pq5HVv9kfjjv5p8Ivg9d+Ozd+J/H7XX2e9V2gVmKTTu3/AC2PoBnIHf0x1APaP2fIdOt/hJoKaXcR3AMRkuGTqJmJZ1b3BOPoB2xXo1fHOkajr/7P/wARZNP1ESXWgXZ3MFHy3EWcCVPSRe4/A9Qa+uNE1Wy1vSrbUtLuI7myuUEkUqHIYH+vYjtQBergPjV4Bj8f+D5LSIIuq2pM9jKxwA+OVJ/usOD+B7V39ch4w+JHhPwkjDWdZtkuAOLaJvNmP/AFyR9TgUAeM/AL4ntosy+BfGpezntXNvaTXHy+WwOPIkJ6c/dPTt6V6R8Yvipp3gLTXt4HjuvEEyfuLUHPl56PJ6L6DqfzI+b/AIr+KbT4q+L7Y+EPDNyt6AUaRV3T3I4wXReAB65PHfFYenac3gDxpaH4g+Gbm4gjO77LI4VX6YYHlZAP7ucHoTQB7N+zr8Pr7VtXf4g+LxJLcTsZbJZh80jt1nI9P7v5jgCvpOuH8FfFHwh4rijj0rVYIbkgAWdyRDKPYKfvf8ByK7igDlvidoGoeJ/BOo6To18bDUJwnlT+YyBcOpIJXnBAI/Gvmf4m/BCPwP4Butevdbm1DUhLGhVIgkY3tg5JJZvrxX2DXkn7Uv8AySG+/wCvmD/0OgBvwL8K6RbfC7SdR07TLSLWrqyZjeeWPOLksM7zyO3SvPpvA/xphkhik8aRRyzsViRtVcGQgEkKNvJwCeOwr2P4Ff8AJI/DH/XoP/QjXFftFfD3VtejtfFHhq7vDqmlJkWkch5UHdviHZx3A+8AO45AOW/4V98cf+hvH/gyk/8AiK8s+LGg+OdG8R6Tb+MNUk1DUZowbOVboybfnxgFgNp3YP4jn0+qfgZ4t1bxj4HivtdsJLe5jcw/aCoVLoD+NR29D2yDj0Hkv7U3/JR/Bf8Auj/0cKAOj8B+C/izpvi/TLvxH4k+16RFIWuIRfO+9cHjaVAPOK96oooAKKKKACiiigAooooAKKKKAMzxT/yLGr/9ec3/AKAa+fP2L/8AU+Lv960/lNX0H4p/5FjV/wDrzm/9ANfPn7F/+p8Xf71p/KagD6H1vSNP1zTpbDV7OC8s5Bh4pkDKff2PvXilp+z5Z6R8RdM1vQ9Tnt9It5fOktd7CVCOQqOOqk8HPOM8nPHvVFACDgY54rmfEumWWmeDPE/9n2sVv9qtrq4m8tceZI0bbmPqTXT1ieN/+RM17/rwuP8A0W1AHiv7HH/IreIP+v5f/RdfQtfPX7HH/IreIP8Ar+X/ANF19C0AfMX7WTrH408FvIyoigszMcAASLyTX0P/AMJLoX/Qa0z/AMC4/wDGvnP9ry3+1+KvCNtu2edG8e7GcZdRnH41s/8ADL+l/wDQyXv/AIDr/jQB7rF4h0WaVIotX055HIVUW5QliegAzyaq+O9Zu/D3hDVdX06yW+uLKAziBnKBlXluQD0XJxjnGK8k8P8A7OOm6Nr2m6pH4gvJXsrmK5WNoFAYo4bBOe+K95oA+WBP8ZfimcW4bQdGk/iAa0jK/XmRx9OK4n4JfDXT/HfiTXNN1q8u4TYJu32rr8zbypzuU5H5V9u18R/Cv4eL8QvGfiO2fVZtNFozyboY9xfMhGOowOKAPYj+zH4WPXWNb/76i/8AiKb/AMMw+Ff+gzrf/fcX/wARVb/hmmD/AKG/Uf8AwHH/AMVR/wAM0W//AEN2of8AgOP/AIqgDzD4vfDfS/h34p8OW+l3V7cpdsJGa5KnaQ6gY2qPWvtQkKCScAdSa+Jfi18Ok+Hninw9BHqs2oi8IfdLHsKbZAMdTkc19tHoaAOO+MXPws8Ukf8AQOm/9Brz/wCBv/JuVz/1xvv/AGevRPivbzXfwz8SW9pDJPPLYSpHFGpZnYrwAByTXzH4V8V/Erwz4LfwxYeD53091lUyTaXcmXEmd3IIHfjigDe+D3izV/B/wPvb7QNI/tW9m8QPbrDhm27reM7tq8tyoGMjrXFfE2bx/wCJvEXh0eNbZdNuL1/J09GQRBNzqCSoy68lfvc8V7z+yppeoaT8PNRg1WxurKdtVlkEdzC0bFTFEMgMAcZB59jXO/tJ/wDJSfht/wBff/taKgDq/hl8FbTwVcXt9JrFzf6heWklrNlAkRVyCTjkk5Uck/hXzV4U8Sa9B4X1H4faLbSNe6vfhZCh+Yrt2tGPQEqNx/ug1718bPizqNjrEngvwRaXMniCbbFJOsZ3R7hkCIdzg53dB29R598C9Mm8BfHQaJ4kiijv5rJoYmHzKsjqsgw30VlyO+RQB9G/C3wZbeBPB1po9vte4A826mUY82Ygbm+nAA9gK62vAr/VdQ1D9q+006yvLmKzs7QLdRRysqOBE0gDKODzIvXvXvtABRXGWvxO8J3XjKTwtDqinWEdotnlsEMi9UD4wWGDxntiuzoAKKKKACg0UUAcf8YP+SV+K/8AsHTf+gGvHf2cviF4V8MfDtrDXtZgs7w3ssvlOjk7SFweAR2NfQut6Za61pF5pmoIXtLuJoZVDFSVYYIyORXm3/Cgfh7/ANAm4/8AA2X/AOKoA1f+Fy/D/wD6Ga1/79yf/E15L+ylNHc+OvG08DB4pcOjDuDK5Br0X/hQHw9/6BNx/wCBkv8A8VXT+Bvhz4a8D3N1P4cs5LaS5RUlLzvJkA5H3icdaAMz9oH/AJI74l/64p/6NSsj9l7/AJJDp3/Xef8A9GGtX9oR1T4OeJCxwPKjH4+alZP7Lpz8IdO/67z/APow0AetV82/tm/8ePhP/rrc/wAo6+kq+bf2zv8Ajy8J/wDXW5/lHQB2On/A34dS2FtJJpjF3jVjm+lHJAP9+vMf2ivhx4U8F+FNNv8Aw3ZtBczXohdvtDyZTy3OMMx7qK6qw/Zo8PT2NvNJrWrb5I1dtojAyQCcfLXnnx2+EOlfD3w3YalpuoX11JPdi3ZLjZgAozZG0Dn5aAPUvA/wY8Bat4K0DUNQ02SS7u9Pt7iZheSLl3jVmOA2ByTxXN/HP4U+DfCvw7vdV0Cwkgv4pYlVzdSOMM4B4LEdKd4N/Z00HXfCWi6tcaxqkU19ZQ3Lonl7VLoGIGV6c1hfF/4G6P4I8E3Gt6fql/cTQyxp5c4TaQzAdgD3oA9x/Z7/AOSOeGv+uL/+jXr0SvO/2fP+SO+Gv+uL/wDo169EoA8l+JXxg8NeDfE76RrOj3l5dxxJJ5kUcTDa3IHzMDXKf8NF+Cf+hZ1L/wAB4P8A4usT4iLbN+1foS3oha3dbdXEwBQgq3Bzx1xX0F/ZXhj/AJ8NF/78xf4UAeMf8NF+Cf8AoWdS/wDAeD/4uj/hovwT/wBCzqX/AIDwf/F17P8A2V4Y/wCfDRf+/MX+FH9leGP+fDRf+/MX+FAHkOl/tB+DbvUrW3t/DupRzzSrHG5ghG1iQAchsjrXvlfK37RNvptr8UvBkelRWcK4jZ0tlVR/rwASF+h/KvqmgAooooAKKKKACiiigAooooAKKKKACiiigAooooArXX+vt/8Ae/qKs1Wuv9fb/wC9/UVZoAKKKKACiiigCG8/49n/AA/nT4P9TH/uimXn/Hs/4fzp8H+pj/3RQA+iiigAooooAKKKKACvJvB/weTQ/idqXi7UNWfVJZ9724mj2vFI/DEkcHC8DGPvHgYFes0UAch8WPCknjPwDqmiW0ixXMyq8DP93zEYMAfY4xn3rwLwsvxs8C6UNH0zRDPYwO3lo6RzBckk7WVs4JJP419WUUAfNLeLvjxcoVh8NRwkjG4Wij/0J8Vv/AP4deJtI8U6r4u8bkJqd5E0SxNIruxdgzO23IH3QAB6ngcV7vRQBxvxP+H2mfELSbWy1SSWBracSxzwgb1HRlGezD9QD2rpNC0u20TR7PTLESC1tIlhiEjl2CqMDJPJq9RQBwfxo8J6P4s8FTx6/eyWFtYt9sF0hH7sqpByDwQQSMeuK5X9k7Triy+FrT3AZUvr6W4hDAj5NqJ/NGru/HfgbTPG40+LW5rw2No7SNaQy7I7gnGBJjkgY4xjr1rprO2gsrWG2tIY4beFAkccahVRQMAADoKAJaKKKACiiigAooooAKy/FMepS+G9UTQpfK1Y20n2R8LxLtOz73HXHXitSigD5ojvf2ho02NarIf7xSyJH5ECrnwh+Fni5fiKPGXjx1S5jLyBWlV5JpGUqCdmVCgHoD2AxivouigArnvHnhLTvGvhq50bVkPlS4aOVQN8Mg+66+4/UEjvXQ0UAYXg3wrpPhDRIdL0O2WG3j5ZuryN3Zz3J/8ArDArz79oGz8fXtlp1r4GlmNndMYLqO1wkwJBIYyE8IRkHpg4yTnj16koA8H+FP7P+n6DJFqfi949U1MHetsOYIm98/fP149j1r3hQFUAAADoB2oooA5P4m+CNO8e+GZtL1BQkwy9rcgZaCTHBHsehHcfhWX8FfAU3w+8JnTrvUHvLqeTzpVVj5MTH+GMHnHqe59K9AxRQB8veM/Dvxj8VeLtW0yC9vU0aK5ZIZjKtrA0X8PC4LjaRnhuc1r+Df2Z7C2dLjxZqsl7IfmNvaZjTPu5+Y/gFr6LooAxvDPhfRPDFn9m0DTLaxiP3vKT5n92Y8sfck1Y17RNL8QWDWOt2FtfWjcmKdAwz6jPQ+4rRooA+fPGX7NOj3jvP4W1KbTHJ3C3uAZovoDncv47q4pvCnxp8BZGk3V9d2i9Psc4uo/wicZH/fNfXFFAGdbxagvh6OGW4VtVFqFafYApm2YLbemN3OK+Z/G2m/Gzx1psOia1odvFZmZZHMbQoGIzgs288DOeK+qaKAMDwDoT+GfBmjaNLIsstlbJFI6/dZ8fMR7ZJrfoooA8d+Kd18UdM8Swj4f2cV1ohtkJjMUJEcu5gw5IboFPpzXnWn/Dz4k+PPiDpmtePII7O1s3jLM7RjEaNu2IiEnJOeT69eMV9T0UAFFFFABRRRQAUUUUAFFFFABRRRQBn+Ionn8P6nDCjPLJayoiqMliUIAFeKfsq+FNd8LxeJh4g0u5sPtDW3k+cuN+3zc4+mR+de90UAFFFFABWP4vhkuPCmtQQI0k0llOiIoyWYxsAAPXNbFJQB4j+yx4c1jw54c1qHXtNudPlmu1eNJ02ll2YyK9voooA+dv2mdB1jV/GXhCbStKv76GAHzXtrd5Fj/eKfmKg46HrX0RQetFABS0lLQAV8c+BPhN4u1jxZrbfatW8Kxguy3TW8ieeGk+6CGXI79e1fY1FAHz3/wonxd/0U7U/wDvmb/49R/wonxd/wBFO1P/AL5m/wDjtfQlFAHx38QvhJ4w0fxHorC61bxWrFWe5W3kf7OA4+U5Zvr1r7DP6UtJQAD5uT0paKKAOU+J0XieXwjcHwNOItcR0aLIjw67vmX94CvQk/hXh2i/Dv4meL/iBoesfER44rXS5klBaWEnajB9iLFxyQMk4/QCvpyigDPXRtOXWm1f7FB/ajRCD7VsHmeWCTtz6ZJryb9oD4a6l4lfTvEfhM48Q6bhdquEaVAdylWP8SnJHrk+1e00UAeDfs/+AfEun+J9X8XeOVdNUukMUayurSNuILO23gfdAA9M8AYr3miigD5c8ZeA9P0v9ojwuvh28lkvb/UP7UvLY4b7MqyCQnI5w2JOD049a+o647wR8O9F8IXV5fWZubvVbwkz395J5kzAnO0HsvTgegyTgV2NABRRRQAUUUUAFFFFABXjvxe/4WtB4ngm+HjedpDWy+ZERbfLKGbP+s+bkbenFexUUAfKHijw/wDHHx1ZppOu2iR6czh3XzLeJCR0LFDuODzj9K+hPhd4V/4QrwPpmhtKs01urNLIvRnZizY9gTgewrq6KACvn79rXQdX1y08MDRdKv8AUTDJcGQWlu82zIjxnaDjOD19K+gaKAPnuz+D3xCazgP/AAs7VoMxqfK8+4Gzj7v+s7VV1j4B+Ltbt0g1r4g3OowI+9Y7vzpVVsEZAZyAcE819HUUAfPVr8EvHdpbRW1p8TdRgt4UEccUcs6oigYCqBJgADjArmviZ8JvH9l4Tnmm8W6x4njEiBtNTz5i+T97ZubODg9K+qqKAOD+Bdjd6b8KfD9pqNrPaXcUTiSGeMxuh8xzgqeRwa7yiigD5k+Mnw41nxn8b7bZZXseizxQxTahHDvSIAHPPT2/GtP/AIZe0f8A6GPUP+/CV9EUUAfO/wDwy9o//Qx6h/34Sk/4Zd0f/oY9Q/78JX0TRQB8ieKfgfqnhbxloJ8OR6hrNj5kcs83kgCEiQZBIPoM19d0UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAFa6/19v/AL39RVmq11/r7f8A3v6irNABRRRQAUUUUAQ3n/Hs/wCH86fB/qY/90Uy8/49n/D+dPg/1Mf+6KAH0UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAVrr/X2/+9/UVZqtdf6+3/3v6irNABRRRQAUUZooAhvP+PZ/w/nT4P8AUx/7opl5/wAez/h/Onw/6lP90UAPooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoozRQBWuv9fb/wC9/UVZqtdf6+D/AHv6irNABRRRmgDySK7uYTmKeRP91zV+HxBqcYwLpm/3wDWXkD2/CkJDds1+dQxFWn8Mmvme/KnB7o6BfFV/s2yCJx/u4NX7fxgVVVltRgDGVauQorrhmmKhtMzeFpPod5D4us2+/HMn4Zq7D4k0yT/l4KH/AGlNebUZrqhnuJjvZmUsFT6HqkWqWMv3LuI/VgKtRyJJ9x1b6HNeQ05HZDlGZT6g4rojxDL7VP8AH/gGTwK6SPX6K8ri1S+i/wBXdzj/AIGTVyLxHqaYzcbx/tID/SuuGf0H8UWvu/zIeBmtmj0iiuCj8XXwGHjhYewIq5D4yPSW049Vf/61dEM5wsvtW+TMnhKq6HY0VzEPi+zf/WQyp+tWo/E+mucGRl/3lrpjmGGkrqojN0Ki6G7RWbHrWnSfdu4/xOKtR3ltJ/q7iJvowreFenP4ZJ/Mhwkt0WKKAQRkHIozWpIUUZooAKKKKACiijNABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFGaACijNFABRRmigAoozTJHSMZd1UepOKLgPoqnJqNlGMvdQj/gQqrL4g02P/l5Vj6LzWM8RSh8UkvmUoSeyNaiudk8WacudnmufQLVSTxnDkiO0kPuzAVzyzLCxV3NGioVH0OtoripPGMx/wBXbRj6tmqcvivUX+75SD2WueWd4RbNv5f5mkcHVZ6DRXmM2valN967Yf7uF/lVSS7uZf8AW3Mz/wC9ITXNLP6S+GDf4f5mqwEuskepy3MEP+tmjT6sBVWTWdOj+9dRfgc15ceuSefzoxXLPiCf2IJfj/kWsDHqz0ObxRpsfR3c/wCytU5vGNuP9TbyN9SBXEEc0VyTzzFS2aXyNI4KmtzprnxbPI6GO3Rdpzyc1Wm8U6nJ9140/wB1P8awaWueeZYqW83+RtHD0l9kvzaxqM337yX/AICdv8qpvPNIcvLIx9SxNMorklVnP4pN/MtU4rZBRRRUDCiiigoKKKKAYUUUUAFFFFABRRRQAUUUUgCiiimA9JZYz+7kdfoSKtR6rfxj5LucfVyapUVpGtUjtJolwi90bEXiPVE4+07h6Min+lWU8W6gn3lgf/gJH9a56itoY/Ew2qP7yHQpv7KOrj8aSAfvLRWPs+P6VaTxpAV+e1lB9FINcVRXTHOMXFW5vwRDwlJ9Dvo/F2nsPmWVD6EZ/lVmLxNpj8Gfb9Qa84oreOfYlbpP5f8ABM3gab2PUE1nT5DhbyLP1qwl7bN924iP/AxXk9KCR0JreHEE/tQRm8AujPXVkV/usG+hzT68iE0i9JGH41Kl9dp9y5mX6Oa1XEMftQ/H/gEvAP8AmPWKK8vj1vUUP/H5Kfqc/wA6sr4n1Vf+XgMP9pF/wroWf4frF/h/mQ8DPuj0eivP18W6iOq27fVD/Q1YTxjcD79rGfoxFbRzvCy3bXyIeCqrodxRXIJ4yX+OyYfSXP8ASp08Y2h+/bzr+R/rWyzXCS2n+D/yJeFqrodRRXPJ4r09uvmr9VqdPEumN/y3I+qEVqsfhntUX3mbo1F9lm1RWYmu6a/S7j/Hipl1Sxf7tzEf+BVrHEUpbSX3idOS3RdoquLu3b7syH/gVSLLG3R1P41opxezJsySijNGaoQUUUZoAKKM0ZoAKKM0ZoAKKKM0AFFGaM0AFFFFABRRmjNABRRmjNABRRmjNABRRRQAUUZozQAUUZozQAUUZozQAUUZozQAUUZooAKKKM0AFFGaM0AFFFFABRRRQAUUZooAKKKM0AFFGaKACiijNABRRmigAoqMzxKcGRAfdqia+tU+9cRD6sKhzit2NJss0Vnvq+nJ968hH/AqhfxDpi/8vSH6ZNZyxNGO8195SpzfQ1qKwpPFGmJ/y2c/RDUDeLrAfdSZvoB/jWcsfho71F95Xsaj+yzpKK5Z/GNsB8ltKx92Aqs/jJv4LLH1k/8ArVjLNsJH7f5/5FrC1XsjsqK4WTxheH/VwQr/AL2T/Wq7eK9SPQxL9E/+vWMs7wsdm38i1gqp6FRXmr+I9UbrdEfRFH9KrtrGoP8Aeu5vwcisZZ/QW0X+BSwM+rR6lUbzRp950X6nFeUvd3D/AHppT9WNQl2bq7H61hLiFdKf4/8AALWAb+0eqSalZx/fuoR/wIVA+u6anW7j/DNeY49c0YHpWEuIKvSKKWBj1Z6JJ4o0xCQJXb6KarSeMLJfuxTP9ABXCUmKxlnmJltZfItYKmt7nZSeM1BPl2bH/ekx/Sq0njK6b/V20K/Uk/4Vy2KWsJ5ripfb/I0jhaXY35PFepP0MSD/AGU/xqrNr+pydbtx/ugD+QrKornnjcRPeo/vNFRpr7KLMt/eTf6y6mb6uagLM33nZvqabRWMqk5bs0suisL+NFJRWeoBRRRQMKKKKACiiigAooooAKKKKACiiigAooooAKKKKCQooooGgooooGFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRSYBRRRTFYKKKKB2CiiigLBRRRSCwUUUUwsLkjoSKUSOP42/Om0UuZisTLdTp92aQfRqlTU75el1N/33VSirVaotm/vE4p7o0V1rUV/wCXyY/U1MniLU1/5eSfqorIxRWyxddfbf3sh04fyr7jcTxRqg6zof8AtmtTL4s1AdRC31T/AOvXO0VoswxK/wCXj+8Pq9J/ZOkTxff/AMUNufoCP61KvjK4H3rWI/RiK5aitFmeLX23+BDwtLsdcvjNh96xB+kuP6VKnjOP+OycfSTP9K4yirjnGMX2/wAEL6rSfT8zth4zt+9rKP8AgQpw8aWX8VvcD6bf8a4ekwPSr/trF919xP1Ol2O8Txhp7dY7hfqo/wAaf/wl2m/9Nv8AviuBoq1nmK8vuF9SpnoI8V6YeryD6oaevinSyeZmH/bNv8K87oprPcT1S+5/5j+o0/M9HHiXSz0uP/HD/hT18RaWTgXafiD/AIV5rSY5zV/2/iP5V+P+ZP1CHdnpv9vaZ/z9x/rThrmmn/l8i/76rzHFFP8At+t/Kvx/zD6hDuz0/wDtvTf+fyH/AL6pf7a03/n9g/77FeX0hFP+3638i/EX9nx7nqP9tab/AM/1v/32KX+2NO/5/bf/AL7FeWY9qMe1H+sFX+RC+oR7nqn9r6d/z+wf99ij+19O/wCf2D/vsV5XtNG00f6wVf5EH9nx7nqf9saf/wA/kH/fYo/tjTv+fyD/AL7FeW7RRtFP/WCr/Ih/2fHuepf2zpv/AD+2/wD32Kb/AG3pv/P7D/31Xl+KWj/WCr/Ig/s+Pc9P/tzTf+fyL86Z/b2m/wDP0n615nRU/wBv1v5V+I1gIdz0r/hIdL/5+l/I/wCFNbxJpS/8vP5Ix/pXm9FDz+v0ivx/zD6hDuz0Q+KdLHSZz/2zNMPizTc8NKf+AGvPqKh57iey+5/5h9Rp92egHxbpwHHnH6LUbeL7Af8ALK4P/AR/jXB0VLzzFeX3D+pUvM7hvGVoPu285+uBUZ8aQ9rSQ/8AAx/hXF0VDzrF919w/qdLsdifGi/w2JP1lx/Son8Zyn7lmg+smf6VydFQ83xb+3+C/wAivqtLsdO3jG7P3beEfUk1E3i/UD0jtx/wE/41ztFZvM8W/wDl4ylhqS6G83ivUm6NGPolR/8ACTaq3/Lwo+iCsWis3jsS/wDl4/vK9jT/AJUaj6/qTdbpvwAFRNrGoN1u5v8Avo1QoqHiaz3m/vYeyh2X3FptRu263Ex/4Eaia5mb70jn6tUVFZOpN7yf3l8i7DmkdvvMT9TTcmiipbvuVZBk0UUUaDsFFFFBIUUUUhhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUgCiiigAooopgFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUV0fibTbXTrCyWOMLcuMOwJ5wOeOnUitqdCVSE6i2jb8TOVRRko9znKKs6Zam81C3twOHcA/Tv8ApWl4ujtoNV8m0iWMIg3be5P/ANbFVHDylRdbonYHUSmodTEooqxp1qb2+gt16yNg/Tv+lYxg5yUY7stySV2V6K7eDw3EmtlvsymwCYG58/N+eawNW0G8tjcXAjH2dXOMHsTxx+Iruq5ZXpQc2r2b2v06+hjDE05O1zHorsH8M/uNO8uDMu4G5Jk4x3GCfc9Kh1rw1cPfE6bAi2+0YG/v36055ViYx5uW+3fr8unUSxVNu1zlaKluoHtbh4JhiRODjkVb0Vbb7cn9oI5tz1x0z2z7VxRpOVRU3o9tenqauaUXIz6K1PEOlrp12ogk82GUbkxyQK0fE1hb2+n6fJBDskdfnK9+B1rolgqkfac28LfiQq8Xa3U5o8daK6XT9Is7bTGvdVYv5qfu0jOSPp7/AKDvXNsCOcEA9M1lWw86Ki59Vf8A4cqFWM21HoJRWzpnh+61G1FxDJEqEkYckH+VW/8AhD73/nvb/wDfR/wrSGX4mcVKMNGS8RTi7NnN0VvWXh7z5LhJryOF4X2H5c54B45HrVv/AIRNP+glF/3x/wDXqoZbiZq6j+K/zB4mmtGzlqK2dd0M6VBFJ9pWbzGwAFx/WsauetQnQnyVFZmkZxmrxCiiisigooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBUR3OI0ZjjOAM06KGWVysUbuw6hVJIrd8D/8AIZP/AFyb+Yq9qetppV3La6ZDHkOWlkcZ3MeTXoUcHTdFV6s7K7W2pzyrSU+SKuzlJYZYWxNG8bejDFMrurK4TxLpVzDcRoLhAMEdATnBH5VyeiWJ1HUorfOF+85/2RSr4LllD2T5lPYcK10+ZWtuVYYJZmxDG8hHXYpOKSaJ4W2yo6N6MpFddq2ujS5fsWlwxKIuGJGR9B/jUulX0XiS3ms9Qij89V3Kyj8Mj0xx+dbrL6MpuhGpefppftcz+sSS53HT1OMWJ3BKKzAdcDOKZXT+EJjaavcWMpyHypHbcpP/ANesLVbQ2Wo3FuRwr/L9D0/QiuKphnCiqqe7afk/+CbRq3m4lfy22bsHb644ptehf2an/COnTPl85Yd23/aznP5iuH0u2N3qVvbgfefBHsOTW2Jy+eHlCO/Nb7+xNPERmm+xXaN0ALoVz0yOtPit5ps+TFJIR12KTiug8TTrfeIoLQMRFGViOPUkZ/p+VaXiDVJ9Ea3tbC3jSHbw5GR9Pr/jWiwFNOo5y92DtdLf8SPby91Jas4uWJ4m2yoyN6MCDTK6S91+HUdKkhv7YG6/5ZsnAB9faubrjxFOnBr2UuZP+tTanKUl7ysFFFFc5odd4daG08OXF5JbpK0UhxwM9u/41a07X7fVtQit5LBQzZwzsGxgE+ntUXh60N94WubdWCl5CAT26U/RfDM2n6nFdPcRuqA8AHPII/rX1VD6zyUVSXuNK+3f/I8ufs7z599bDtKtUt9Z1PUJVVYYMqpAwBxk/p/OqbeLldi32CM57mT/AOtVS/mZtevLOW5eG0nlxJ3A6flVHxDpT6XdBV+aB+Uf+YPvXJWxNalCSwuii3zbPVv8jWFOEpL2m7SsdKb5dU8NajP9nSLarIADnsOf1rA8LtHDeSTvew2rIu1fNTcGz1xyPStDRjjwZqXu7D9FrG0LT/7SvNhkWONBuck849qmtVqTqUJpXk16dX2sOEUozXS51un2a6fdx3Nzq/m+epCK/AfOORzVHV7IWdzJM+sYl3eakDj/AGsjjPT8O1UtY1C3u9ZskDYs7ZwoYDg8jJ+nSrWrahpeo3TRxxh5pV8oXEuVVOuCB68+grqqVqMoShG3uvS7ertq9+/yMeWSab6+SLrWnnzLqL64DCjLuCDCcEcfep+u2aTXK3Emr/ZI3X5V7HHcHcKw9auLe202PSrKTzERt0sg/iPp/n0q9dzaRqllY/ar0wtCmCgU57Z7e1N1qbU6SS5tG7ydnLrrfoHK4tS9ei2/4Jz2rQR292VivBdggEyD19OprsZby6tdK0iOwWJpZkVP3nT7orlvE15b32pmW15jChQ2MZ/zmoNGuUtdTt5p2Plxtnue1edRxEcPXnCD0k0rp7K+/U6Z03UpxlLodjv8SZ5isv1/xo3eJM8xWWPx/wAax9Qk0K+u5LiW7uld8ZVV46Y7ioPs/h7/AJ/L3/vn/wCxr0XXs2lP/wAqL/I5lFdv/Jf+Cbdzd+ILW3kmljsxGgycZP8AWqHjli8WmucZZXJx/wABpn27S7XRLuztLiZ2myRvQ5yce3tXLZY/erlx+KSpuknzcyXW9mn6G9Cl73Pa1vLc1vDUU1zq9tEsjiNG3sATjA5qTxPfSS6zMIpHVI8RgA46df1zW54IsTDbSXki/NL8qfQdf8+1TWEuk6hqdxaf2fGJY9zMzICDg4NXSwcpYWFPn5XN319NF+pM6yVVtK6RgeEbWO+1SQXaCVBGWw/PORWNdqou5Qg2qHOB7Z4rp/A4Rby/JYLtAUE/U/4UJ4UQShn1GIgMCQU/+vXOsHUr4Wn7KN3eV3oW60YVZcz7CeN/ki06LuqNn/x0f0rla7/XtFGsXMci3aRqi7cBd349a4CozelOGIc5LR7fJIrCyTgkt0FFFFeUdQUUUUAFFFFABRRRSTAKKKKYBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAdB4H/AOQyf+uTfzFZWsf8ha8/67v/AOhGrvha9t7DVDLdSeXGYyoO0nnI9Kz9SkWfULqWM5R5WZT6gk4rvnOLwUYX15noc8Yv27dtLHS/D7/W3n0X+Zqn4GYDW2B6mJgPzFHhDUrXTpLlryXyw4UKdpOcZ9BWJaXElpdx3EJxJGciuiOIhTp4aW/K5XXXciUHKVRd7HU6n4g+x388DafCzI5GT3HY9Krx+LWjbMenQqemVbH9KtTXei64iPes1rcgYJBx+uMH8ahNxomlW0y2g+1zOu0lxkficYx9K7KlWu5uca8eTvpf7rXMIxg1Zwd/mc8b2T+02vQoEhl8wDPTnOK6/UtPXUdY0u9jGYJRuc/7oyM/yrh66rSNfjtdAlgkfFzGGEIwTn056f8A6q4surU5OVPEPR+981/mb4iEklKHTQItX/4rAyMf3DE249Mdv1/nV20sV03WdSvpUxDEm9PfdknH5YriCSWDdx0rqNc1+G80SKGF/wDSJMecuCMY5/nWuGxsZxnOs/ei3KPq+n32ZnUotNKOz0ZzU0jSzPK7HzGYsSPXrXQWniieNfs+pW63KAYJPDfj2NYNncG2uop1VWKNuw3euouX0DWCJ55ntLkj5+cZ/TBrmwMqnvSp1FGXZ9V8zWuo3SlG6C503TtX0uW90xDBLGCSuMAkDOCOn4iuRrqr3VdO0zSpbLSGaWSTIZz7jGSe/wCFUvDf9k7Ln+1NvmYG3dnGPbHetcXSp1qsIRlFSt7zXw3JoylCMpNNrp3MKilbG47fu54pK8c7Dq9M/wCRJv8A/fP/ALLWb4QJPiG1yT/F3/2DWv4djjuvDNxayTpCZJCMt26dqm0fQrfTtRiuv7Sjk8vPy7QM5BHXPvX0cMNUqzw9WC0ilfVd7nnupGKqRe7ucz4j/wCQ5ef9dP6VfGsw3GgPZXqGSZMCEj9Dn2/WqHiLnWbwj/npVzTPDk1/ZR3MNxGFfPDAgjBI/pXnw9u8RUjQV73uvK5u+RU4OfkXrP8Ad+B7w/33/myiuVUlR8pIOO1djrUUek+GY9PMgeV27d+dxP06Vy2n2U9/cCC2UM+M8kDinj4SU6VFK7UUreYUGnGU3s2zr5dRm03wrp81uqF22od4J4wT/SotE1zUtUvfIH2eP5Sxbyycf+PCnNo97Lp8Vvql3bwWkJDDaMnuOpx61HHqelaHEY9MT7TM3DPnr9T/AIV6rnVpzjKrLkppK6e79EtTktGUWkryZFqHia/tL2a3U20gjbbu8sjP61Y126e88JQXE2A7upO3p1NVGvdC1OQ/bLd7OduS6dCfXj+oq3c6VPd6Ulrp19BcWiHKgjBGOeoqIyrVY1OWfPFp2Seq+Ts/zG1CPLdWa3OMrp/AgDXtyGUEbB1HvXOXUEltcPDMu2RDgjOa6fQdH1ezczQfZ4vMUA+Yd3H4V5WW06ixKai3y72OvETi6bV9yL/hK7jft+yQdfQ1pazqt1pYh82G0dpc/KAeMY68+9V4bLStCbz7y6FxdJyqAdD/ALv9TVWTxJbXsjLqOnpJFn5SD8yj/PuK9N1qlKDjXqpTe3W3rZM5uSMmnCN0tzT8Pa22p37wSwQoBGWyo9CP8a4u9/4+rgDpvb+dddpUOnG4M2jXoguWUr5Uy564OMHnt71ga3pF3p7mW62FZGOGQ8E9elc+NjWqYeLn71m7tWa6dv8AIuhKCqO2l+hr+E9TnubyztH4jgjf/gXp+Q4pfDI/4qy++kn/AKGKzPCVxFbaurzyLGmxhljgV0Vgmk2WpTXialEzy7sqXGBk5rbBSdWFOcpL3ZPd9LJIiulCUklujEsvDc1/b/ao7iJQ7NhSDkYYipv+EPuf+fuH9a5uXAkbbjGT0rVsPD97fWiXMBiMbZxlsHg4rhoujU92NBya/vP79jefPHVzsvQ2/DNsdOl1dHYOYUX5h0PBNcbXZxWb6J4ZvvtTIJZsgBeeowB/M1xlPMIunTpUmrNJu3a7DDvmlKV77fgFFFFeWdQUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFGKKKACiiikAUUUUAFFFFMAooooAKckrovyOyr6AkU2ijUBCzMcnn60+GWSCQSQu0bjoynBptFCbTugHyzSzHMsjOfc0yiim23qwCpIJZYHDwyMjDupwajopJtO6Bq+4sjtJI8khLOxJJPc1Ya/u2jWNriby1GAu8gY+lVqKpTktmLlXYUnJ5pKKKkYVNNdTzRJHNK7omdoY5xUNFNSaTS6icU3cKKKKACporm4hXEM8qD0VyKhopxk4u6Ymk9ySeeafHnTSSY6bmJxUdFFJtyd2NKwUUUUhhRRRSYBRRRTAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD/2fsuRQsAAAAAZHQDpbvnZPys2ulH13JHlA==">
    </div>
    <button id="n_clear">数据清零</button>
    <button id="n_button">开始刷课</button>
  </div>
</div>`;
  $('body').append(outerHTML);
  // 添加css样式
  function addStyle() {
    let css = `
    ul,
    li,
    p {
      margin: 0;
      padding: 0;
    }

    body {
      width: 100vw;
      height: 100vh;
    }

    .n_outer {
      margin: 0;
      padding: 0;
      position: fixed;
      top: 0;
      right: 0;
      min-width: 500px;
      height: 250px;
      background-color: #fff;
      z-index: 99999;
      box-shadow: 6px 4px 17px 2px #000000;
      border-radius: 10px;
      border: 1px solid #a3a3a3;
      font-family: Avenir, Helvetica, Arial, sans-serif;
      color: #636363;
    }

    .n_header {
      text-align: center;
      height: 40px;
      background-color: #f7f7f7;
      color: #000;
      font-size: 18px;
      line-height: 40px;
      cursor: move;
      border-radius: 10px 10px 0 0;
      border-bottom: 2px solid #eee;
    }

    .n_body {
      font-weight: bold;
      font-size: 13px;
      line-height: 26px;
      height: 183px;
    }

    .n_body .n_infoAlert {
      overflow-y: scroll;
      height: 100%;
    }

    /* 滚动条整体 */
    .n_body .n_infoAlert::-webkit-scrollbar {
      height: 20px;
      width: 7px;
    }

    /* 滚动条轨道 */
    .n_body .n_infoAlert::-webkit-scrollbar-track {
      --webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
      border-radius: 10px;
      background: #ffffff;
    }

    /* 滚动条滑块 */
    .n_body .n_infoAlert::-webkit-scrollbar-thumb {
      border-radius: 10px;
      --webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
      background: rgb(20, 19, 19, 0.6);
    }

    .n_footer {
      position: absolute;
      bottom: 0;
      left: 0;
      text-align: right;
      height: 25px;
      width: 100%;
      background-color: #f7f7f7;
      color: #c5c5c5;
      font-size: 13px;
      line-height: 25px;
      border-radius: 0 0 10px 10px;
      border-bottom: 2px solid #eee;
      display: flex;
      justify-content: space-between;
    }

    .n_footer button {
      border-radius: 6px;
      border: 0;
      background-color: blue;
      color: #fff;
      cursor: pointer;
    }

    .n_footer button:hover {
      background-color: yellow;
      color: #000;
    }

    .n_footer #n_zanshang {
      cursor: pointer;
      position: relative;
      color: red;
    }

    .n_footer #n_zanshang img {
      position: absolute;
      top: 30px;
      left: -130px;
      display: none;
      width: 300px;
    }

    .n_footer #n_zanshang:hover img {
      display: block;
    }
  `;
    GM_addStyle(css);
  }
  addStyle();

  // 窗口的拽拖逻辑
  $('.n_header').mousedown(function (e) {
    let innerLeft = e.offsetX,
      innerTop = e.offsetY
    $('body').mousemove(function (e) {
      let left = e.clientX - innerLeft,
        top = e.clientY - innerTop;
      //获取body的页面可视宽高
      var clientHeight = document.documentElement.clientHeight || document.body.clientHeight;
      var clientWidth = document.documentElement.clientWidth || document.body.clientWidth;
      // 通过判断是否溢出屏幕
      if (left <= 0) {
        left = 0;
      } else if (left >= clientWidth - $('.n_outer')[0].offsetWidth) {
        left = clientWidth - $('.n_outer')[0].offsetWidth
      }
      if (top <= 0) {
        top = 0
      } else if (top >= clientHeight - $('.n_outer')[0].offsetHeight) {
        top = clientHeight - $('.n_outer')[0].offsetHeight
      }
      $('.n_outer').css({
        left: () => {
          return left + 'px';
        },
        top: () => {
          return top + 'px';
        }
      })
    })
  })
  $('.n_header').mouseup(function (e) {
    $('body').off();
  })
  $('#n_button').click(function () {
    main();
    $('#n_button').text('刷课中~');
  })
  $('#n_clear').click(function () {
    localStorage.removeItem(location.href);
    localStorage.removeItem('userCount');
    localStorage.removeItem('pro_lms_classCount');
  })
}

// 脚本运行核心逻辑
function main() {
  start();
  // 视频播放速率,可选值 [1,1.25,1.5,2],默认为二倍速
  const rate = 2;
  // 向弹窗里追加信息
  function alertMessage(message) {
    $('.n_infoAlert').append(`<li>${message}</li>`);
  }
  setInterval(function () {
    document.querySelector('.n_infoAlert').lastElementChild.scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });
  }, 500)
  // 视频自动加速逻辑
  function speed() {
    let keyt = '';
    if (rate === 2 || rate === 1) {
      keyt = "[keyt='" + rate + ".00']"
    } else {
      keyt = "[keyt='" + rate + "']"
    }
    function fun(className, selector) {
      var mousemove = document.createEvent("MouseEvent");
      mousemove.initMouseEvent("mousemove", true, true, unsafeWindow, 0, 10, 10, 10, 10, 0, 0, 0, 0, 0, null);
      console.log(document.getElementsByClassName(className)[0]);
      document.getElementsByClassName(className)[0].dispatchEvent(mousemove);
      document.querySelector(selector).click();
      alertMessage('已开始两倍速播放');
    }
    fun('xt_video_player_speed', keyt)
  }
  // 判断页面类型执行不同的操作
  function start() {
    const url = location.host;
    const pathName = location.pathname.split('/');
    const matchURL = url + pathName[0] + '/' + pathName[1] + '/' + pathName[2];
    console.log(matchURL);
    const changjiangv2 = ['changjiang.yuketang.cn/v2/web', 'yuketang.cn/v2/web', 'www.yuketang.cn/v2/web', 'xxxxx.yuketang.cn/v2/web', 'rain.gdufemooc.cn/v2/web'];
    const pro_lms = ['bksycsu.yuketang.cn/pro/lms', 'henuyjs.yuketang.cn/pro/lms'];
    alertMessage(`正在为您匹配${url}的处理逻辑...`);
    if (changjiangv2.includes(matchURL)) {
      yuketang_v2();
    } else if (pro_lms.includes(matchURL) || matchURL.includes('yuketang.cn/pro/lms')) {  // 没有匹配到但网址含有 pro/lms 就优先匹配
      yukerang_pro_lms();
    }
  }
  // yuketang.cn/v2/web页面的处理逻辑
  function yuketang_v2() {
    alertMessage('已匹配到www.yuketang.cn,正在处理...');
    // 用于判断不同的课程
    let baseUrl = location.href;
    // 根据客户端记录的URL判别刷到那一集了,不影响第一批用户的刷课进度。
    if (localStorage.getItem('classIndex')) {
      localStorage.setItem(baseUrl, +localStorage.getItem('classIndex'));
      localStorage.removeItem('classIndex');
    }
    let count = +localStorage.getItem(baseUrl) || 0;
    alertMessage(`检测到已经播放到${count}集...`);
    let classList = [];
    // 用于标记视频是否播放完毕
    let play = true;
    // 主函数
    function main() {
      autoSlide(count).then(() => {
        let list = document.querySelector('.logs-list').childNodes;
        alertMessage('刷课状态：第' + (count + 1) + '个/' + list.length + '个');
        classList[count] = list[count]?.querySelector('.content-box')?.querySelector('section');
        let classInfo = classList[count]?.querySelector('.tag')?.querySelector('use')?.getAttribute('xlink:href');
        if (classInfo?.includes('shipin') && play === true) { // 视频处理
          play = false;
          classList[count].click();
          setTimeout(() => {
            alertMessage('第' + (count + 1) + '个：进入了视频区');
            speed();
            let progress = document.querySelector('.progress-wrap').querySelector('.text');
            let timer1 = setInterval(() => {
              if (progress.innerHTML.includes('100%') || progress.innerHTML.includes('99%') || progress.innerHTML.includes('98%')) {
                count++;
                localStorage.setItem(baseUrl, count);
                play = true;
                history.back();
                main();
                clearInterval(timer1);
              }
            }, 10000);
          }, 3000)
          // 批量处理
        } else if (classInfo?.includes('piliang') && play === true) {   // 批量处理
          let zhankai = classList[count].querySelector('.sub-info').querySelector('.gray').querySelector('span');
          sync();
          async function sync() {
            await zhankai.click();
            setTimeout(() => {
              alertMessage('第' + (count + 1) + '个：进入了批量区');
              localStorage.getItem('userCount') ? localStorage.getItem('userCount') : localStorage.setItem('userCount', 0);
              // 保存所有视频
              let a = list[count].querySelector('.leaf_list__wrap').querySelectorAll('.activity__wrap');
              let count1 = localStorage.getItem('userCount');
              bofang();
              function bofang() {
                let classInfo1 = a[count1]?.querySelector('.tag').querySelector('use').getAttribute('xlink:href');
                let play = true;
                if (classInfo1?.includes('shipin') && play === true) {
                  play = false;
                  a[count1].click();
                  alertMessage(`开始播放视频`);
                  // 延迟3秒后加速
                  setTimeout(() => {
                    speed();
                  }, 3000);
                  let timer = setInterval(() => {
                    let progress = document.querySelector('.progress-wrap').querySelector('.text');
                    if (progress.innerHTML.includes('100%') || progress.innerHTML.includes('99%') || progress.innerHTML.includes('98%')) {
                      count1++;
                      localStorage.setItem('userCount', count1);
                      clearInterval(timer);
                      alertMessage(`视频播放完毕`);
                      history.back();
                      setTimeout(() => {
                        bofang();
                      }, 2000);
                    }
                  }, 3000)
                } else if (classInfo1 && !classInfo1.includes('shipin') && play === true) {
                  alertMessage('不是视频');
                  count1++;
                  localStorage.setItem('userCount', count1);
                  bofang();
                } else if (count1 === a.length && play === true) {
                  alertMessage('合集播放完毕');
                  count++;
                  localStorage.setItem('userCount', count1);
                  localStorage.setItem(baseUrl, count);
                  main();
                }
              }
            }, 2000)
          }
        } else if (classInfo?.includes('ketang') && play === true) {    // 课堂处理
          alertMessage('第' + (count + 1) + '个：进入了课堂区');
          play = false;
          classList[count].click();
          setTimeout(() => {
            let playBack = document.querySelector('.playback');
            if (playBack) { // 存在回放按钮时进入详情页
              playBack.click();
              setTimeout(() => {
                // 内容为视频的逻辑
                if (document.querySelector('video')) {
                  function isComplate() {
                    let videoTime = document.querySelector('.video__time').innerHTML.toString();
                    let currentTime = videoTime.split('/')[0];
                    let totalTime = videoTime.split('/')[1];
                    if (currentTime == totalTime || currentTime == '00:00' || currentTime == '00:00:00') {
                      count++;
                      localStorage.setItem(baseUrl, count);
                      play = true;
                      history.go(-2);
                      main();
                      clearInterval(timer);
                    }
                  }
                  let timer = setInterval(() => {
                    isComplate();
                  }, 10000)
                }
                // 内容为音频的逻辑
                if (document.querySelector('audio')) {
                  function isComplate() {
                    let mainArea = document.querySelector('.mainArea');
                    let currentTime = mainArea.querySelectorAll('span')[0].innerHTML.toString();
                    let totalTime = mainArea.querySelectorAll('span')[1].innerHTML.toString();
                    if (currentTime == totalTime || currentTime == '00:00' || currentTime == '00:00:00') {
                      count++;
                      localStorage.setItem(baseUrl, count);
                      play = true;
                      history.go(-2);
                      main();
                      clearInterval(timer);
                    }
                  }
                  let timer = setInterval(() => {
                    isComplate();
                  }, 10000)
                }
              }, 3000)
            } else {   // 不存在回放按钮时退出
              count++;
              localStorage.setItem(baseUrl, count);
              play = true;
              history.go(-1);
              main();
            }
          }, 3000)
        } else if (classInfo?.includes('kejian') && play === true) {  // 课件处理
          alertMessage('根据ycj用户的反馈修改新增课件处理，且赞助支持，表示感谢') // 8.8元
          alertMessage('第' + (count + 1) + '个：进入了课件区');
          play = false;
          classList[count].click();
          let classType;
          (async function () {
            await new Promise(function (resolve) {
              setTimeout(function () {
                classType = $('.el-card__header')[0].innerText;
                console.log(classType);
                $('.check').click();
                resolve();
              }, 3000)
            })  // 3秒后执行点击事件
            let className = $('.dialog-header')[0].firstElementChild.innerText;
            console.log(className);
            if (classType == '课件PPT') {  // 课件为ppt
              let allPPT = $('.swiper-wrapper')[0].children;
              alertMessage(`开始播放${className}`)
              for (let i = 0; i < allPPT.length; i++) {
                await new Promise(function (resolve) {
                  setTimeout(function () {
                    allPPT[i].click();
                    alertMessage(`${className}：第${i + 1}个ppt已经播放`);
                    resolve();
                  }, 500)
                })
              }
              if ($('.video-box')) {  // 回头检测如果ppt里面有视频
                let pptVideo = $('.video-box');
                alertMessage('检测到ppt里面有视频，将继续播放视频');
                for (let i = 0; i < pptVideo.length; i++) {
                  if ($('.video-box')[i].innerText != '已完成') {   // 判断视频是否已播放
                    pptVideo[i].click();
                    alertMessage(`开始播放：${className}里面的第${i + 1}个视频`)
                    await new Promise(function (resolve) {
                      setTimeout(function () {
                        speed();  // 加速
                        $('.xt_video_player_common_icon').click();  // 静音
                        resolve();
                      }, 3000)
                    })
                    alertMessage('已开启二倍速，且自动静音');
                    await new Promise(function (resolve) {
                      let timer = setInterval(function () {
                        let allTime = $('.xt_video_player_current_time_display')[0].innerText;
                        nowTime = allTime.split(' / ')[0];
                        totalTime = allTime.split(' / ')[1]
                        console.log(nowTime + totalTime);
                        if (nowTime == totalTime) {
                          clearInterval(timer);
                          resolve();
                        }
                      }, 200);
                    })  // 等待视频结束
                  } else {  // 视频已完成
                    alertMessage(`检测到${className}里面的第${i + 1}个视频已经播放完毕`);
                  }
                }
              }
              alertMessage(`${className} 已经播放完毕`)
            } else {  // 课件为视频
              $('.video-box').click();
              alertMessage(`开始播放视频：${className}`);
              await new Promise(function (resolve) {
                setTimeout(function () {
                  speed();
                  $('.xt_video_player_common_icon').click();
                  resolve();
                }, 3000)
              })  // 3秒后加速,静音
              alertMessage('已开启二倍速，且自动静音');
              await new Promise(function (resolve) {
                let timer = setInterval(function () {
                  let allTime = $('.xt_video_player_current_time_display')[0].innerText;
                  nowTime = allTime.split(' / ')[0];
                  totalTime = allTime.split(' / ')[1]
                  console.log(nowTime + totalTime);
                  if (nowTime == totalTime) {
                    clearInterval(timer);
                    resolve();
                  }
                }, 200);
              })  // 等待视频结束
              alertMessage(`${className} 视频播放完毕`)
            }
            count++;
            localStorage.setItem(baseUrl, count);
            play = true;
            history.back();
            main();
          })()
        } else if (count === list.length && play === true) {            // 结束
          alertMessage('课程刷完了');
          $('#n_buttoni').text('刷完了~');
          localStorage.setItem(baseUrl, 0);
          return;
        } else if (!(classInfo.includes('shipin') || classInfo.includes('piliang') || classInfo.includes('kejian')) && play === true) { // 视频，批量，课件都不是的时候跳过，此处可以优化
          alertMessage('第' + (count + 1) + '个：不是视频，已跳过');
          count++;
          localStorage.setItem(baseUrl, count);
          main();
        }
      })
    }
    // 根据视频集数，自动下拉刷新集数
    async function autoSlide(count) {
      let frequency = parseInt((count + 1) / 20) + 1;
      for (let i = 0; i < frequency; i++) {
        await new Promise((resolve, reject) => {
          setTimeout(() => {
            document.querySelector('.viewContainer').scrollTop = document.querySelector('.el-tab-pane').scrollHeight;
            resolve();
          }, 1000)
        })
      }
    }
    main();
  }
  // yuketang.cn/pro/lms页面的处理逻辑
  function yukerang_pro_lms() {
    localStorage.setItem('n_type', true);
    alertMessage('正准备打开新标签页...');
    localStorage.getItem('pro_lms_classCount') ? null : localStorage.setItem('pro_lms_classCount', 1);  // 初始化集数
    let classCount = localStorage.getItem('pro_lms_classCount') - 1;
    $('.leaf-detail')[classCount].click();  // 进入第一个课程，启动脚本
  }
  // 其他不同类型的DOM页面的处理逻辑，待完善...
}

function yukerang_pro_lms_new() {
  function alertMessage(message) {
    $('.n_infoAlert').append(`<li>${message}</li>`);
  }
  function speed() {
    const rate = 2;
    let keyt = '';
    if (rate === 2 || rate === 1) {
      keyt = "[keyt='" + rate + ".00']"
    } else {
      keyt = "[keyt='" + rate + "']"
    }
    function fun(className, selector) {
      var mousemove = document.createEvent("MouseEvent");
      mousemove.initMouseEvent("mousemove", true, true, unsafeWindow, 0, 10, 10, 10, 10, 0, 0, 0, 0, 0, null);
      console.log(document.getElementsByClassName(className)[0]);
      document.getElementsByClassName(className)[0].dispatchEvent(mousemove);
      document.querySelector(selector).click();
      alertMessage('已开始两倍速播放');
    }
    fun('xt_video_player_speed', keyt)
  }
  function claim() {
    $(
      "#video-box > div > xt-wrap > xt-controls > xt-inner > xt-volumebutton > xt-icon"
    ).click();
    alertMessage('已开启静音')
  }
  function playOut() {
    let nowTime = document.querySelector('.xt_video_player_current_time_display').firstElementChild.innerText;
    let totalTime = document.querySelector('.xt_video_player_current_time_display').lastElementChild.innerText;
    if (nowTime == totalTime) {
      return true;
    } else {
      return false;
    }
  }
  function nextCount(classCount) {
    event1 = new Event('mousemove', { bubbles: true });
    event1.clientX = 9999;
    event1.clientY = 9999;
    if ($('.btn-next')[0]) {
      localStorage.setItem('pro_lms_classCount', classCount);
      $('.btn-next')[0].dispatchEvent(event1);
      $('.btn-next')[0].dispatchEvent(new Event('click'));
      main();
    } else {
      localStorage.removeItem('pro_lms_classCount');
      alertMessage('课程播放完毕了');
    }
  }
  function controllScroll() {
    let scrollTimer;
    scrollTimer = setInterval(function () {
      document.querySelector('.n_infoAlert').lastElementChild.scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });
    }, 500)
    document.querySelector('.n_infoAlert').addEventListener('mouseenter', () => {
      clearInterval(scrollTimer);
      console.log('enter');
    })
    document.querySelector('.n_infoAlert').addEventListener('mouseleave', () => {
      scrollTimer = setInterval(function () {
        document.querySelector('.n_infoAlert').lastElementChild.scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });
      }, 500)
      console.log('leave');
    })
  }
  alertMessage('已就绪，开始刷课，请尽量保持页面不动。');
  let classCount = localStorage.getItem('pro_lms_classCount');
  controllScroll();
  async function main() {
    alertMessage(`准备播放第${classCount}集...`);
    await new Promise(function (resolve) {
      setTimeout(function () {
        let className = $('.header-bar')[0].firstElementChild.innerText;
        let classType = $('.header-bar')[0].firstElementChild.firstElementChild.getAttribute('class');
        let classStatus = $('#app > div.app_index-wrapper > div.wrap > div.viewContainer.heightAbsolutely > div > div > div > div > section.title')[0]?.lastElementChild?.innerText;
        if (classType.includes('tuwen') && classStatus != '已读') {
          alertMessage(`正在废寝忘食地看:${className}中...`);
          setTimeout(() => {
            resolve();
          }, 2000)
        } else if (classType.includes('taolun')) {
          alertMessage(`只是看看，目前没有自动发表讨论功能，欢迎反馈...`);
          setTimeout(() => {
            resolve();
          }, 2000)
        } else if (classType.includes('shipin') && !classStatus.includes('100%')) {
          alertMessage(`正在播放：${className}`);
          setTimeout(() => {
            // 监测视频播放状态
            let timer = setInterval(() => {
              let status = playOut();
              let classStatus = $('#app > div.app_index-wrapper > div.wrap > div.viewContainer.heightAbsolutely > div > div > div > div > section.title')[0]?.lastElementChild?.innerText;
              if (status || classStatus.includes('100%') || classStatus.includes('99%') || classStatus.includes('98%')) {
                alertMessage(`${className}播放完毕...`);
                clearInterval(pauseTimer);
                clearInterval(timer);
                resolve();
              }
            }, 200)
            // 根据video是否加载出来判断加速时机
            let nowTime = Date.now();
            let videoTimer = setInterval(() => {
              let video = document.querySelector('video');
              if (video) {
                setTimeout(() => {  // 防止视频刚加载出来，就加速，出现无法获取到元素地bug
                  speed();
                  claim();
                  clearInterval(videoTimer);
                  unexpectedPause();
                }, 2000)
              } else if (!video && Date.now() - nowTime > 20000) {  // 如果20s内仍未加载出video
                localStorage.setItem('n_type', true);
                location.reload();
              }
            }, 1000)
            // 防止视频意外暂停
            let pauseTimer;
            function unexpectedPause() {
              // 判断视频是否意外暂停
              pauseTimer = setInterval(() => {
                let agoTime = document.querySelector('.xt_video_player_current_time_display').firstElementChild.innerText;
                setTimeout(() => {
                  let nowTime = document.querySelector('.xt_video_player_current_time_display').firstElementChild.innerText;
                  console.log();
                  if (agoTime == nowTime) { // 意外暂停
                    document.querySelector('.xt_video_bit_play_btn').click();
                  }
                }, 3000)
              }, 2000)
            }
          }, 2000)
        } else if (classType.includes('zuoye')) {
          alertMessage(`进入：${className}，目前没有自动作答功能，敬请期待...`);
          setTimeout(() => {
            resolve();
          }, 2000)
        } else {
          alertMessage(`您已经看过${className}...`);
          setTimeout(() => {
            resolve();
          }, 2000)
        }
      }, 2000);
    })
    alertMessage(`第${classCount}集播放完了...`);
    classCount++;
    nextCount(classCount);
  }
  main();
}

// 油猴执行文件
(function () {
  'use strict';
  addWindow();
  if (localStorage.getItem('n_type') === 'true') {
    $('#n_button').text('刷课中~');
    localStorage.setItem('n_type', false);
    yukerang_pro_lms_new();
  }
})();























","requires":[{"meta":{"name":"jquery.js","url":"https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.js","ts":1696740304873,"mimetype":"text/javascript"},"source":"/*!
 * jQuery JavaScript Library v3.7.1
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-08-28T13:37Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket trac-14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var version = "3.7.1",

	rhtmlSuffix = /HTML$/i,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},


	// Retrieve the text value of an array of DOM nodes
	text: function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {

			// If no nodeType, this is expected to be an array
			while ( ( node = elem[ i++ ] ) ) {

				// Do not traverse comment nodes
				ret += jQuery.text( node );
			}
		}
		if ( nodeType === 1 || nodeType === 11 ) {
			return elem.textContent;
		}
		if ( nodeType === 9 ) {
			return elem.documentElement.textContent;
		}
		if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}

		// Do not include comment or processing instruction nodes

		return ret;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	isXMLDoc: function( elem ) {
		var namespace = elem && elem.namespaceURI,
			docElem = elem && ( elem.ownerDocument || elem ).documentElement;

		// Assume HTML when documentElement doesn't yet exist, such as inside
		// document fragments.
		return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || "HTML" );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}


function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var pop = arr.pop;


var sort = arr.sort;


var splice = arr.splice;


var whitespace = "[\\x20\\t\\r\\n\\f]";


var rtrimCSS = new RegExp(
	"^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
	"g"
);




// Note: an element does not contain itself
jQuery.contains = function( a, b ) {
	var bup = b && b.parentNode;

	return a === bup || !!( bup && bup.nodeType === 1 && (

		// Support: IE 9 - 11+
		// IE doesn't have `contains` on SVG.
		a.contains ?
			a.contains( bup ) :
			a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
	) );
};




// CSS string/identifier serialization
// https://drafts.csswg.org/cssom/#common-serializing-idioms
var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

function fcssescape( ch, asCodePoint ) {
	if ( asCodePoint ) {

		// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
		if ( ch === "\0" ) {
			return "\uFFFD";
		}

		// Control characters and (dependent upon position) numbers get escaped as code points
		return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
	}

	// Other potentially-special ASCII characters get backslash-escaped
	return "\\" + ch;
}

jQuery.escapeSelector = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};




var preferredDoc = document,
	pushNative = push;

( function() {

var i,
	Expr,
	outermostContext,
	sortInput,
	hasDuplicate,
	push = pushNative,

	// Local document vars
	document,
	documentElement,
	documentIsHTML,
	rbuggyQSA,
	matches,

	// Instance-specific data
	expando = jQuery.expando,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" +
		"loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rleadingCombinator = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" +
		whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		ID: new RegExp( "^#(" + identifier + ")" ),
		CLASS: new RegExp( "^\\.(" + identifier + ")" ),
		TAG: new RegExp( "^(" + identifier + "|[*])" ),
		ATTR: new RegExp( "^" + attributes ),
		PSEUDO: new RegExp( "^" + pseudos ),
		CHILD: new RegExp(
			"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
				whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
				whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		bool: new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		needsContext: new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		if ( nonHex ) {

			// Strip the backslash prefix from a non-hex escape sequence
			return nonHex;
		}

		// Replace a hexadecimal escape sequence with the encoded Unicode code point
		// Support: IE <=11+
		// For values outside the Basic Multilingual Plane (BMP), manually construct a
		// surrogate pair
		return high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes; see `setDocument`.
	// Support: IE 9 - 11+, Edge 12 - 18+
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE/Edge.
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && nodeName( elem, "fieldset" );
		},
		{ dir: "parentNode", next: "legend" }
	);

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android <=4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = {
		apply: function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		},
		call: function( target ) {
			pushNative.apply( target, slice.call( arguments, 1 ) );
		}
	};
}

function find( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE 9 only
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								push.call( results, elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE 9 only
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							find.contains( context, elem ) &&
							elem.id === m ) {

							push.call( results, elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {
					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( !nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when
					// strict-comparing two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( newContext != context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = jQuery.escapeSelector( nid );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrimCSS, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties
		// (see https://github.com/jquery/sizzle/issues/157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by jQuery selector module
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		return nodeName( elem, "input" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		return ( nodeName( elem, "input" ) || nodeName( elem, "button" ) ) &&
			elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11+
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a jQuery selector context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [node] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
function setDocument( node ) {
	var subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	documentElement = document.documentElement;
	documentIsHTML = !jQuery.isXMLDoc( document );

	// Support: iOS 7 only, IE 9 - 11+
	// Older browsers didn't support unprefixed `matches`.
	matches = documentElement.matches ||
		documentElement.webkitMatchesSelector ||
		documentElement.msMatchesSelector;

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors
	// (see trac-13936).
	// Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
	// all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
	if ( documentElement.msMatchesSelector &&

		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 9 - 11+, Edge 12 - 18+
		subWindow.addEventListener( "unload", unloadHandler );
	}

	// Support: IE <10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		documentElement.appendChild( el ).id = jQuery.expando;
		return !document.getElementsByName ||
			!document.getElementsByName( jQuery.expando ).length;
	} );

	// Support: IE 9 only
	// Check to see if it's possible to do matchesSelector
	// on a disconnected node.
	support.disconnectedMatch = assert( function( el ) {
		return matches.call( el, "*" );
	} );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// IE/Edge don't support the :scope pseudo-class.
	support.scope = assert( function() {
		return document.querySelectorAll( ":scope" );
	} );

	// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
	// Make sure the `:has()` argument is parsed unforgivingly.
	// We include `*` in the test to detect buggy implementations that are
	// _selectively_ forgiving (specifically when the list includes at least
	// one valid selector).
	// Note that we treat complete lack of support for `:has()` as if it were
	// spec-compliant support, which is fine because use of `:has()` in such
	// environments will fail in the qSA path and fall back to jQuery traversal
	// anyway.
	support.cssHas = assert( function() {
		try {
			document.querySelector( ":has(*,:jqfake)" );
			return false;
		} catch ( e ) {
			return true;
		}
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter.ID = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find.ID = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter.ID =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find.ID = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find.TAG = function( tag, context ) {
		if ( typeof context.getElementsByTagName !== "undefined" ) {
			return context.getElementsByTagName( tag );

		// DocumentFragment nodes don't have gEBTN
		} else {
			return context.querySelectorAll( tag );
		}
	};

	// Class
	Expr.find.CLASS = function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	rbuggyQSA = [];

	// Build QSA regex
	// Regex strategy adopted from Diego Perini
	assert( function( el ) {

		var input;

		documentElement.appendChild( el ).innerHTML =
			"<a id='" + expando + "' href='' disabled='disabled'></a>" +
			"<select id='" + expando + "-\r\\' disabled='disabled'>" +
			"<option selected=''></option></select>";

		// Support: iOS <=7 - 8 only
		// Boolean attributes and "value" are not treated correctly in some XML documents
		if ( !el.querySelectorAll( "[selected]" ).length ) {
			rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
		}

		// Support: iOS <=7 - 8 only
		if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
			rbuggyQSA.push( "~=" );
		}

		// Support: iOS 8 only
		// https://bugs.webkit.org/show_bug.cgi?id=136851
		// In-page `selector#id sibling-combinator selector` fails
		if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
			rbuggyQSA.push( ".#.+[+~]" );
		}

		// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// In some of the document kinds, these selectors wouldn't work natively.
		// This is probably OK but for backwards compatibility we want to maintain
		// handling them through jQuery traversal in jQuery 3.x.
		if ( !el.querySelectorAll( ":checked" ).length ) {
			rbuggyQSA.push( ":checked" );
		}

		// Support: Windows 8 Native Apps
		// The type and name attributes are restricted during .innerHTML assignment
		input = document.createElement( "input" );
		input.setAttribute( "type", "hidden" );
		el.appendChild( input ).setAttribute( "name", "D" );

		// Support: IE 9 - 11+
		// IE's :disabled selector does not pick up the children of disabled fieldsets
		// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// In some of the document kinds, these selectors wouldn't work natively.
		// This is probably OK but for backwards compatibility we want to maintain
		// handling them through jQuery traversal in jQuery 3.x.
		documentElement.appendChild( el ).disabled = true;
		if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
			rbuggyQSA.push( ":enabled", ":disabled" );
		}

		// Support: IE 11+, Edge 15 - 18+
		// IE 11/Edge don't find elements on a `[name='']` query in some cases.
		// Adding a temporary attribute to the document before the selection works
		// around the issue.
		// Interestingly, IE 10 & older don't seem to have the issue.
		input = document.createElement( "input" );
		input.setAttribute( "name", "" );
		el.appendChild( input );
		if ( !el.querySelectorAll( "[name='']" ).length ) {
			rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
				whitespace + "*(?:''|\"\")" );
		}
	} );

	if ( !support.cssHas ) {

		// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
		// Our regular `try-catch` mechanism fails to detect natively-unsupported
		// pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
		// in browsers that parse the `:has()` argument as a forgiving selector list.
		// https://drafts.csswg.org/selectors/#relational now requires the argument
		// to be parsed unforgivingly, but browsers have not yet fully adjusted.
		rbuggyQSA.push( ":has" );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a === document || a.ownerDocument == preferredDoc &&
				find.contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b === document || b.ownerDocument == preferredDoc &&
				find.contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	};

	return document;
}

find.matches = function( expr, elements ) {
	return find( expr, null, null, elements );
};

find.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return find( expr, document, null, [ elem ] ).length > 0;
};

find.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return jQuery.contains( context, elem );
};


find.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (see trac-13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	if ( val !== undefined ) {
		return val;
	}

	return elem.getAttribute( name );
};

find.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
jQuery.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	//
	// Support: Android <=4.0+
	// Testing for detecting duplicates is unpredictable so instead assume we can't
	// depend on duplicate detection in all browsers without a stable sort.
	hasDuplicate = !support.sortStable;
	sortInput = !support.sortStable && slice.call( results, 0 );
	sort.call( results, sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			splice.call( results, duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

jQuery.fn.uniqueSort = function() {
	return this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );
};

Expr = jQuery.expr = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		ATTR: function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || "" )
				.replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		CHILD: function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					find.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" )
				);
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

			// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				find.error( match[ 0 ] );
			}

			return match;
		},

		PSEUDO: function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr.CHILD.test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		TAG: function( nodeNameSelector ) {
			var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return nodeName( elem, expectedNodeName );
				};
		},

		CLASS: function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace + ")" + className +
					"(" + whitespace + "|$)" ) ) &&
				classCache( className, function( elem ) {
					return pattern.test(
						typeof elem.className === "string" && elem.className ||
							typeof elem.getAttribute !== "undefined" &&
								elem.getAttribute( "class" ) ||
							""
					);
				} );
		},

		ATTR: function( name, operator, check ) {
			return function( elem ) {
				var result = find.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				if ( operator === "=" ) {
					return result === check;
				}
				if ( operator === "!=" ) {
					return result !== check;
				}
				if ( operator === "^=" ) {
					return check && result.indexOf( check ) === 0;
				}
				if ( operator === "*=" ) {
					return check && result.indexOf( check ) > -1;
				}
				if ( operator === "$=" ) {
					return check && result.slice( -check.length ) === check;
				}
				if ( operator === "~=" ) {
					return ( " " + result.replace( rwhitespace, " " ) + " " )
						.indexOf( check ) > -1;
				}
				if ( operator === "|=" ) {
					return result === check || result.slice( 0, check.length + 1 ) === check + "-";
				}

				return false;
			};
		},

		CHILD: function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										nodeName( node, name ) :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || ( parent[ expando ] = {} );
							cache = outerCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {
								outerCache = elem[ expando ] || ( elem[ expando ] = {} );
								cache = outerCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										nodeName( node, name ) :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );
											outerCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		PSEUDO: function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// https://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					find.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as jQuery does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		not: markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrimCSS, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element
					// (see https://github.com/jquery/sizzle/issues/299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		has: markFunction( function( selector ) {
			return function( elem ) {
				return find( selector, elem ).length > 0;
			};
		} ),

		contains: markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// https://www.w3.org/TR/selectors/#lang-pseudo
		lang: markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				find.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		target: function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		root: function( elem ) {
			return elem === documentElement;
		},

		focus: function( elem ) {
			return elem === safeActiveElement() &&
				document.hasFocus() &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		enabled: createDisabledPseudo( false ),
		disabled: createDisabledPseudo( true ),

		checked: function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			return ( nodeName( elem, "input" ) && !!elem.checked ) ||
				( nodeName( elem, "option" ) && !!elem.selected );
		},

		selected: function( elem ) {

			// Support: IE <=11+
			// Accessing the selectedIndex property
			// forces the browser to treat the default option as
			// selected when in an optgroup.
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		empty: function( elem ) {

			// https://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		parent: function( elem ) {
			return !Expr.pseudos.empty( elem );
		},

		// Element/input types
		header: function( elem ) {
			return rheader.test( elem.nodeName );
		},

		input: function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		button: function( elem ) {
			return nodeName( elem, "input" ) && elem.type === "button" ||
				nodeName( elem, "button" );
		},

		text: function( elem ) {
			var attr;
			return nodeName( elem, "input" ) && elem.type === "text" &&

				// Support: IE <10 only
				// New HTML5 attribute values (e.g., "search") appear
				// with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		first: createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		last: createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		even: createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		odd: createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		lt: createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i;

			if ( argument < 0 ) {
				i = argument + length;
			} else if ( argument > length ) {
				i = length;
			} else {
				i = argument;
			}

			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		gt: createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos.nth = Expr.pseudos.eq;

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rleadingCombinator.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrimCSS, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	if ( parseOnly ) {
		return soFar.length;
	}

	return soFar ?
		find.error( selector ) :

		// Cache the tokens
		tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						if ( skip && nodeName( elem, skip ) ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = outerCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							outerCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		find( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem, matcherOut,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed ||
				multipleContexts( selector || "*",
					context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems;

		if ( matcher ) {

			// If we have a postFinder, or filtered seed, or non-seed postFilter
			// or preexisting results,
			matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results;

			// Find primary matches
			matcher( matcherIn, matcherOut, context, xml );
		} else {
			matcherOut = matcherIn;
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			var ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element
			// (see https://github.com/jquery/sizzle/issues/299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 )
							.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrimCSS, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find.TAG( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: iOS <=7 - 9 only
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
			// elements by id. (see trac-14142)
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							push.call( results, elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					jQuery.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

function compile( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
}

/**
 * A low-level selection function that works with jQuery's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with jQuery selector compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find.ID(
				token.matches[ 0 ].replace( runescape, funescape ),
				context
			) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) &&
						testContext( context.parentNode ) || context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
}

// One-time assignments

// Support: Android <=4.0 - 4.1+
// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Initialize against the default document
setDocument();

// Support: Android <=4.0 - 4.1+
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

jQuery.find = find;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.unique = jQuery.uniqueSort;

// These have always been private, but they used to be documented as part of
// Sizzle so let's maintain them for now for backwards compatibility purposes.
find.compile = compile;
find.select = select;
find.setDocument = setDocument;
find.tokenize = tokenize;

find.escape = jQuery.escapeSelector;
find.getText = jQuery.text;
find.isXML = jQuery.isXMLDoc;
find.selectors = jQuery.expr;
find.support = jQuery.support;
find.uniqueSort = jQuery.uniqueSort;

	/* eslint-enable */

} )();


var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
	// Strict HTML recognition (trac-11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to jQuery#find
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.error );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the error, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getErrorHook ) {
									process.error = jQuery.Deferred.getErrorHook();

								// The deprecated alias of the above. While the name suggests
								// returning the stack, not an error instance, jQuery just passes
								// it directly to `console.warn` so both will work; an instance
								// just better cooperates with source maps.
								} else if ( jQuery.Deferred.getStackHook ) {
									process.error = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
// captured before the async barrier to get the original error cause
// which may otherwise be hidden.
jQuery.Deferred.exceptionHook = function( error, asyncError ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message,
			error.stack, asyncError );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See trac-6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (trac-9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see trac-8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (trac-14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (trac-11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (trac-14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (trac-13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (trac-12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (trac-13208)
				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (trac-13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", true );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, isSetup ) {

	// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
	if ( !isSetup ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				if ( !saved ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					this[ type ]();
					result = dataPriv.get( this, type );
					dataPriv.set( this, type, false );

					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						return result;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering
				// the native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved ) {

				// ...and capture the result
				dataPriv.set( this, type, jQuery.event.trigger(
					saved[ 0 ],
					saved.slice( 1 ),
					this
				) );

				// Abort handling of the native event by all jQuery handlers while allowing
				// native handlers on the same element to run. On target, this is achieved
				// by stopping immediate propagation just on the jQuery event. However,
				// the native event is re-wrapped by a jQuery one on each level of the
				// propagation so the only way to stop it for jQuery is to stop it for
				// everyone via native `stopPropagation()`. This is not a problem for
				// focus/blur which don't bubble, but it does also stop click on checkboxes
				// and radios. We accept this limitation.
				event.stopPropagation();
				event.isImmediatePropagationStopped = returnTrue;
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (trac-504, trac-13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {

	function focusMappedHandler( nativeEvent ) {
		if ( document.documentMode ) {

			// Support: IE 11+
			// Attach a single focusin/focusout handler on the document while someone wants
			// focus/blur. This is because the former are synchronous in IE while the latter
			// are async. In other browsers, all those handlers are invoked synchronously.

			// `handle` from private data would already wrap the event, but we need
			// to change the `type` here.
			var handle = dataPriv.get( this, "handle" ),
				event = jQuery.event.fix( nativeEvent );
			event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
			event.isSimulated = true;

			// First, handle focusin/focusout
			handle( nativeEvent );

			// ...then, handle focus/blur
			//
			// focus/blur don't bubble while focusin/focusout do; simulate the former by only
			// invoking the handler at the lower level.
			if ( event.target === event.currentTarget ) {

				// The setup part calls `leverageNative`, which, in turn, calls
				// `jQuery.event.add`, so event handle will already have been set
				// by this point.
				handle( event );
			}
		} else {

			// For non-IE browsers, attach a single capturing handler on the document
			// while someone wants focusin/focusout.
			jQuery.event.simulate( delegateType, nativeEvent.target,
				jQuery.event.fix( nativeEvent ) );
		}
	}

	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			var attaches;

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, true );

			if ( document.documentMode ) {

				// Support: IE 9 - 11+
				// We use the same native handler for focusin & focus (and focusout & blur)
				// so we need to coordinate setup & teardown parts between those events.
				// Use `delegateType` as the key as `type` is already used by `leverageNative`.
				attaches = dataPriv.get( this, delegateType );
				if ( !attaches ) {
					this.addEventListener( delegateType, focusMappedHandler );
				}
				dataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );
			} else {

				// Return false to allow normal processing in the caller
				return false;
			}
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		teardown: function() {
			var attaches;

			if ( document.documentMode ) {
				attaches = dataPriv.get( this, delegateType ) - 1;
				if ( !attaches ) {
					this.removeEventListener( delegateType, focusMappedHandler );
					dataPriv.remove( this, delegateType );
				} else {
					dataPriv.set( this, delegateType, attaches );
				}
			} else {

				// Return false to indicate standard teardown should be applied
				return false;
			}
		},

		// Suppress native focus or blur if we're currently inside
		// a leveraged native-event stack
		_default: function( event ) {
			return dataPriv.get( event.target, type );
		},

		delegateType: delegateType
	};

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	//
	// Support: IE 9 - 11+
	// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
	// attach a single handler for both events in IE.
	jQuery.event.special[ delegateType ] = {
		setup: function() {

			// Handle: regular nodes (via `this.ownerDocument`), window
			// (via `this.document`) & document (via `this`).
			var doc = this.ownerDocument || this.document || this,
				dataHolder = document.documentMode ? this : doc,
				attaches = dataPriv.get( dataHolder, delegateType );

			// Support: IE 9 - 11+
			// We use the same native handler for focusin & focus (and focusout & blur)
			// so we need to coordinate setup & teardown parts between those events.
			// Use `delegateType` as the key as `type` is already used by `leverageNative`.
			if ( !attaches ) {
				if ( document.documentMode ) {
					this.addEventListener( delegateType, focusMappedHandler );
				} else {
					doc.addEventListener( type, focusMappedHandler, true );
				}
			}
			dataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );
		},
		teardown: function() {
			var doc = this.ownerDocument || this.document || this,
				dataHolder = document.documentMode ? this : doc,
				attaches = dataPriv.get( dataHolder, delegateType ) - 1;

			if ( !attaches ) {
				if ( document.documentMode ) {
					this.removeEventListener( delegateType, focusMappedHandler );
				} else {
					doc.removeEventListener( type, focusMappedHandler, true );
				}
				dataPriv.remove( dataHolder, delegateType );
			} else {
				dataPriv.set( dataHolder, delegateType, attaches );
			}
		}
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

	rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (trac-8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Re-enable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {

							// Unwrap a CDATA section containing script contents. This shouldn't be
							// needed as in XML documents they're already not visible when
							// inspecting element contents and in HTML documents they have no
							// meaning but we're preserving that logic for backwards compatibility.
							// This will be removed completely in 4.0. See gh-4904.
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew jQuery#find here for performance reasons:
			// https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var rcustomProp = /^--/;


var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (trac-8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "box-sizing:content-box;border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is `display: block`
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		isCustomProp = rcustomProp.test( name ),

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, trac-12537)
	//   .css('--customProperty) (gh-3144)
	if ( computed ) {

		// Support: IE <=9 - 11+
		// IE only supports `"float"` in `getPropertyValue`; in computed styles
		// it's only available as `"cssFloat"`. We no longer modify properties
		// sent to `.css()` apart from camelCasing, so we need to check both.
		// Normally, this would create difference in behavior: if
		// `getPropertyValue` returns an empty string, the value returned
		// by `.css()` would be `undefined`. This is usually the case for
		// disconnected elements. However, in IE even disconnected elements
		// with no styles return `"none"` for `getPropertyValue( "float" )`
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( isCustomProp && ret ) {

			// Support: Firefox 105+, Chrome <=105+
			// Spec requires trimming whitespace for custom properties (gh-4926).
			// Firefox only trims leading whitespace. Chrome just collapses
			// both leading & trailing whitespace to a single space.
			//
			// Fall back to `undefined` if empty string returned.
			// This collapses a missing definition with property defined
			// and set to an empty string but there's no standard API
			// allowing us to differentiate them without a performance penalty
			// and returning `undefined` aligns with older jQuery.
			//
			// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
			// as whitespace while CSS does not, but this is not a problem
			// because CSS preprocessing replaces them with U+000A LINE FEED
			// (which *is* CSS whitespace)
			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
			ret = ret.replace( rtrimCSS, "$1" ) || undefined;
		}

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0,
		marginDelta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		// Count margin delta separately to only add it after scroll gutter adjustment.
		// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
		if ( box === "margin" ) {
			marginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta + marginDelta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		animationIterationCount: true,
		aspectRatio: true,
		borderImageSlice: true,
		columnCount: true,
		flexGrow: true,
		flexShrink: true,
		fontWeight: true,
		gridArea: true,
		gridColumn: true,
		gridColumnEnd: true,
		gridColumnStart: true,
		gridRow: true,
		gridRowEnd: true,
		gridRowStart: true,
		lineHeight: true,
		opacity: true,
		order: true,
		orphans: true,
		scale: true,
		widows: true,
		zIndex: true,
		zoom: true,

		// SVG-related
		fillOpacity: true,
		floodOpacity: true,
		stopOpacity: true,
		strokeMiterlimit: true,
		strokeOpacity: true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (trac-7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug trac-9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (trac-7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// Use proper attribute retrieval (trac-12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];
						if ( cur.indexOf( " " + className + " " ) < 0 ) {
							cur += className + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );

				// This expression is here for better compressibility (see addClass)
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];

						// Remove *all* instances
						while ( cur.indexOf( " " + className + " " ) > -1 ) {
							cur = cur.replace( " " + className + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var classNames, className, i, self,
			type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		classNames = classesToArray( value );

		return this.each( function() {
			if ( isValidValue ) {

				// Toggle individual class names
				self = jQuery( this );

				for ( i = 0; i < classNames.length; i++ ) {
					className = classNames[ i ];

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (trac-14686, trac-14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (trac-2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (trac-9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (trac-6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// trac-7653, trac-8125, trac-8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes trac-9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (trac-10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket trac-12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// trac-9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (trac-11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// trac-1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see trac-8605, trac-14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// trac-14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this
			.on( "mouseenter", fnOver )
			.on( "mouseleave", fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "$1" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );
"}]}]}